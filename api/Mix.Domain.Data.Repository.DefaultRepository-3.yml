### YamlMime:ManagedReference
items:
- uid: Mix.Domain.Data.Repository.DefaultRepository`3
  commentId: T:Mix.Domain.Data.Repository.DefaultRepository`3
  id: DefaultRepository`3
  parent: Mix.Domain.Data.Repository
  children:
  - Mix.Domain.Data.Repository.DefaultRepository`3.Instance
  langs:
  - csharp
  - vb
  name: DefaultRepository<TDbContext, TModel, TView>
  nameWithType: DefaultRepository<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>
  type: Class
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.Repository
  syntax:
    content: 'public class DefaultRepository<TDbContext, TModel, TView> : ViewRepositoryBase<TDbContext, TModel, TView> where TDbContext : DbContext where TModel : class where TView : ViewModelBase<TDbContext, TModel, TView>'
    typeParameters:
    - id: TDbContext
    - id: TModel
    - id: TView
    content.vb: >-
      Public Class DefaultRepository(Of TDbContext As DbContext, TModel As Class, TView As ViewModelBase(Of TDbContext, TModel, TView))
          Inherits ViewRepositoryBase(Of TDbContext, TModel, TView)
  inheritance:
  - System.Object
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  inheritedMembers:
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CheckIsExists({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CheckIsExists(System.Func{{TModel},System.Boolean},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CreateModel({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CreateModelAsync({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.EditModel({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.EditModelAsync({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetSingleModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.InitContext
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.LogErrorMessage(System.Exception)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParsePagingQuery(System.Linq.IQueryable{{TModel}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParsePagingQueryAsync(System.Linq.IQueryable{{TModel}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParseView(System.Collections.Generic.List{{TModel}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParseView({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RegisterAutoMapper
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelList({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListAsync({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveListModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModel({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModelAsync({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.SaveModel({TView},System.Boolean,{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.SaveModelAsync({TView},System.Boolean,{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.SaveSubModelAsync({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.Max(System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.MaxAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.Count(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CountAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.Count({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CountAsync({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.UpdateFields(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetLambda(System.String,System.Boolean)
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView)
  name.vb: DefaultRepository(Of TDbContext, TModel, TView)
- uid: Mix.Domain.Data.Repository.DefaultRepository`3.Instance
  commentId: P:Mix.Domain.Data.Repository.DefaultRepository`3.Instance
  id: Instance
  parent: Mix.Domain.Data.Repository.DefaultRepository`3
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: DefaultRepository<TDbContext, TModel, TView>.Instance
  fullName: Mix.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>.Instance
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.Repository
  syntax:
    content: public static DefaultRepository<TDbContext, TModel, TView> Instance { get; }
    parameters: []
    return:
      type: Mix.Domain.Data.Repository.DefaultRepository`3
    content.vb: Public Shared ReadOnly Property Instance As DefaultRepository(Of TDbContext, TModel, TView)
  overload: Mix.Domain.Data.Repository.DefaultRepository`3.Instance*
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView).Instance
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Mix.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView).Instance
references:
- uid: Mix.Domain.Data.Repository
  commentId: N:Mix.Domain.Data.Repository
  isExternal: true
  name: Mix.Domain.Data.Repository
  nameWithType: Mix.Domain.Data.Repository
  fullName: Mix.Domain.Data.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  commentId: T:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}
  parent: Mix.Domain.Data.Repository
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3
  name: ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView)
  name.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3
    name: ViewRepositoryBase
    nameWithType: ViewRepositoryBase
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3
    name: ViewRepositoryBase
    nameWithType: ViewRepositoryBase
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CheckIsExists({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CheckIsExists(System.Func{{TModel},System.Boolean},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(System.Func<TModel, System.Boolean>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(System.Func(Of TModel, System.Boolean), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CreateModel({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CreateModel(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CreateModelAsync({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.EditModel({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: EditModel(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModel(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.EditModelAsync({TView},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: EditModelAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetSingleModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.InitContext
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.InitContext
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  name: InitContext()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.InitContext()
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.InitContext()
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext()
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext()
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
    name: InitContext
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.InitContext
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
    name: InitContext
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.LogErrorMessage(System.Exception)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.LogErrorMessage(System.Exception)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
  name: LogErrorMessage(Exception)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage(Exception)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage(System.Exception)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage(Exception)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage(System.Exception)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParsePagingQuery(System.Linq.IQueryable{{TModel}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParsePagingQuery(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery(System.Linq.IQueryable<TModel>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery(System.Linq.IQueryable(Of TModel), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParsePagingQuery(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQuery
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQuery
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParsePagingQueryAsync(System.Linq.IQueryable{{TModel}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParsePagingQueryAsync(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync(System.Linq.IQueryable<TModel>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync(System.Linq.IQueryable(Of TModel), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParsePagingQueryAsync(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQueryAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQueryAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParseView(System.Collections.Generic.List{{TModel}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseView(List<TModel>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(List<TModel>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(System.Collections.Generic.List<TModel>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(List(Of TModel), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(System.Collections.Generic.List(Of TModel), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParseView(List(Of TModel), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.ParseView({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseView(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RegisterAutoMapper
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RegisterAutoMapper
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  name: RegisterAutoMapper()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper()
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper()
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper()
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper()
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
    name: RegisterAutoMapper
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
    name: RegisterAutoMapper
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelList({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelList(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelList(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelList(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListAsync({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListAsync(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListAsync(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveListModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModel({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModel(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.RemoveModelAsync({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.SaveModel({TView},System.Boolean,{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.SaveModelAsync({TView},System.Boolean,{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.SaveSubModelAsync({TModel},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.Max(System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Max(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Max(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Max(System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Max(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Max(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Max(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Max
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Max
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Max
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Max
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).Max
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Max
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.MaxAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: MaxAsync(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: MaxAsync(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: MaxAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: MaxAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.Count(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Count(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Count(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CountAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CountAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CountAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.Count({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Count(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.CountAsync({TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CountAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.UpdateFields(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: UpdateFields(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Collections.Generic.List<Mix.Domain.Core.ViewModels.EntityField>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.Collections.Generic.List(Of Mix.Domain.Core.ViewModels.EntityField), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: UpdateFields(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFields
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFields
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},{TDbContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: UpdateFieldsAsync(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Collections.Generic.List<Mix.Domain.Core.ViewModels.EntityField>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.Collections.Generic.List(Of Mix.Domain.Core.ViewModels.EntityField), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: UpdateFieldsAsync(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFieldsAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFieldsAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase{`0,`1,`2}.GetLambda(System.String,System.Boolean)
  parent: Mix.Domain.Data.Repository.ViewRepositoryBase{{TDbContext},{TModel},{TView}}
  definition: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
  name: GetLambda(String, Boolean)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda(String, Boolean)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda(System.String, System.Boolean)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda(String, Boolean)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda(System.String, System.Boolean)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3
  commentId: T:Mix.Domain.Data.Repository.ViewRepositoryBase`3
  isExternal: true
  name: ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView)
  name.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3
    name: ViewRepositoryBase
    nameWithType: ViewRepositoryBase
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3
    name: ViewRepositoryBase
    nameWithType: ViewRepositoryBase
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(System.Func<TModel, System.Boolean>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(System.Func(Of TModel, System.Boolean), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CreateModel(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: EditModel(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModel(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: EditModelAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  isExternal: true
  name: InitContext()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.InitContext()
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.InitContext()
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext()
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext()
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
    name: InitContext
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.InitContext
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
    name: InitContext
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
  isExternal: true
  name: LogErrorMessage(Exception)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage(Exception)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage(System.Exception)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage(Exception)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage(System.Exception)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParsePagingQuery(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery(System.Linq.IQueryable<TModel>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery(System.Linq.IQueryable(Of TModel), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParsePagingQuery(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQuery
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQuery
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParsePagingQueryAsync(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync(IQueryable<TModel>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync(System.Linq.IQueryable<TModel>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync(System.Linq.IQueryable(Of TModel), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParsePagingQueryAsync(IQueryable(Of TModel), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQueryAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParsePagingQueryAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseView(List<TModel>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(List<TModel>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(System.Collections.Generic.List<TModel>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(List(Of TModel), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(System.Collections.Generic.List(Of TModel), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParseView(List(Of TModel), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseView(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  isExternal: true
  name: RegisterAutoMapper()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper()
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper()
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper()
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper()
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
    name: RegisterAutoMapper
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
    name: RegisterAutoMapper
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelList(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelList(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelList(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListAsync(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListAsync(String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, Int32, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, System.Int32, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, System.Int32, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, Int32, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModel(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Max(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Max(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Max(System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Max(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Max(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Max(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Max
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Max
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Max
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Max
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).Max
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Max
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: MaxAsync(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: MaxAsync(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: MaxAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: MaxAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Count(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Count(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CountAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CountAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Count(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Count
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CountAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CountAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: UpdateFields(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Collections.Generic.List<Mix.Domain.Core.ViewModels.EntityField>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.Collections.Generic.List(Of Mix.Domain.Core.ViewModels.EntityField), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: UpdateFields(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFields
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFields
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: UpdateFieldsAsync(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Collections.Generic.List<Mix.Domain.Core.ViewModels.EntityField>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.Collections.Generic.List(Of Mix.Domain.Core.ViewModels.EntityField), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: UpdateFieldsAsync(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFieldsAsync
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Mix.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: UpdateFieldsAsync
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Mix.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
  isExternal: true
  name: GetLambda(String, Boolean)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda(String, Boolean)
  fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda(System.String, System.Boolean)
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda(String, Boolean)
  fullName.vb: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda(System.String, System.Boolean)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda
    fullName: Mix.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.DefaultRepository`3.Instance*
  commentId: Overload:Mix.Domain.Data.Repository.DefaultRepository`3.Instance
  isExternal: true
  name: Instance
  nameWithType: DefaultRepository<TDbContext, TModel, TView>.Instance
  fullName: Mix.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>.Instance
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView).Instance
  fullName.vb: Mix.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView).Instance
- uid: Mix.Domain.Data.Repository.DefaultRepository`3
  commentId: T:Mix.Domain.Data.Repository.DefaultRepository`3
  parent: Mix.Domain.Data.Repository
  isExternal: true
  name: DefaultRepository<TDbContext, TModel, TView>
  nameWithType: DefaultRepository<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView)
  name.vb: DefaultRepository(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Mix.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Mix.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
