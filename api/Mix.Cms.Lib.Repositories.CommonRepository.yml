### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.Repositories.CommonRepository
  commentId: T:Mix.Cms.Lib.Repositories.CommonRepository
  id: CommonRepository
  parent: Mix.Cms.Lib.Repositories
  children:
  - Mix.Cms.Lib.Repositories.CommonRepository.Instance
  - Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  langs:
  - csharp
  - vb
  name: CommonRepository
  nameWithType: CommonRepository
  fullName: Mix.Cms.Lib.Repositories.CommonRepository
  type: Class
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: 'public class CommonRepository : Object'
    content.vb: >-
      Public Class CommonRepository
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: LoadCultures(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: LoadCultures(String, MixCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.LoadCultures(String, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public List<SupportedCulture> LoadCultures(string initCulture = null, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: initCulture
      type: System.String
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    content.vb: Public Function LoadCultures(initCulture As String = Nothing, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As List(Of SupportedCulture)
  overload: Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Repositories.CommonRepository.Instance
  commentId: P:Mix.Cms.Lib.Repositories.CommonRepository.Instance
  id: Instance
  parent: Mix.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: CommonRepository.Instance
  fullName: Mix.Cms.Lib.Repositories.CommonRepository.Instance
  type: Property
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public static CommonRepository Instance { get; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Repositories.CommonRepository
    content.vb: Public Shared ReadOnly Property Instance As CommonRepository
  overload: Mix.Cms.Lib.Repositories.CommonRepository.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Mix.Cms.Lib.Repositories
  commentId: N:Mix.Cms.Lib.Repositories
  isExternal: true
  name: Mix.Cms.Lib.Repositories
  nameWithType: Mix.Cms.Lib.Repositories
  fullName: Mix.Cms.Lib.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures*
  commentId: Overload:Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures
  isExternal: true
  name: LoadCultures
  nameWithType: CommonRepository.LoadCultures
  fullName: Mix.Cms.Lib.Repositories.CommonRepository.LoadCultures
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
  commentId: T:Mix.Cms.Lib.Models.Cms.MixCmsContext
  parent: Mix.Cms.Lib.Models.Cms
  isExternal: true
  name: MixCmsContext
  nameWithType: MixCmsContext
  fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
  commentId: '!:System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}'
  definition: System.Collections.Generic.List`1
  name: List<SupportedCulture>
  nameWithType: List<SupportedCulture>
  fullName: System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>
  nameWithType.vb: List(Of SupportedCulture)
  fullName.vb: System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture)
  name.vb: List(Of SupportedCulture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.Models.Cms
  commentId: N:Mix.Cms.Lib.Models.Cms
  isExternal: true
  name: Mix.Cms.Lib.Models.Cms
  nameWithType: Mix.Cms.Lib.Models.Cms
  fullName: Mix.Cms.Lib.Models.Cms
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.Repositories.CommonRepository.Instance*
  commentId: Overload:Mix.Cms.Lib.Repositories.CommonRepository.Instance
  isExternal: true
  name: Instance
  nameWithType: CommonRepository.Instance
  fullName: Mix.Cms.Lib.Repositories.CommonRepository.Instance
- uid: Mix.Cms.Lib.Repositories.CommonRepository
  commentId: T:Mix.Cms.Lib.Repositories.CommonRepository
  parent: Mix.Cms.Lib.Repositories
  isExternal: true
  name: CommonRepository
  nameWithType: CommonRepository
  fullName: Mix.Cms.Lib.Repositories.CommonRepository
