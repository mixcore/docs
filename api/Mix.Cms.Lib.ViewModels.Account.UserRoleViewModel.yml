### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  id: UserRoleViewModel
  parent: Mix.Cms.Lib.ViewModels.Account
  children:
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId
  langs:
  - csharp
  - vb
  name: UserRoleViewModel
  nameWithType: UserRoleViewModel
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  type: Class
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: 'public class UserRoleViewModel : ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>, IViewModel'
    content.vb: >-
      Public Class UserRoleViewModel
          Inherits ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel)
          Implements IViewModel
  inheritance:
  - System.Object
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  implements:
  - Mix.Domain.Data.ViewModels.IViewModel
  inheritedMembers:
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Repository
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitModel
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseModel(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Validate(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandViewAsync(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitViewAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseViewAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneSubModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitView(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseView(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Clone(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneSubModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveModel(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveModel(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveSubModels(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Exception
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsClone
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsLazyLoad
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Cultures
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Mapper
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Model
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ModelMapper
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Priority
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Specificulture
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Errors
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsValid
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor
  commentId: M:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor
  id: '#ctor'
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: UserRoleViewModel()
  nameWithType: UserRoleViewModel.UserRoleViewModel()
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserRoleViewModel()
  type: Constructor
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public UserRoleViewModel()
    content.vb: Public Sub New
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: '#ctor(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)'
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: UserRoleViewModel(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: UserRoleViewModel.UserRoleViewModel(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserRoleViewModel(Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Constructor
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public UserRoleViewModel(AspNetUserRoles model, MixCmsAccountContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    - id: _context
      type: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Sub New(model As AspNetUserRoles, _context As MixCmsAccountContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: ExpandView(MixCmsAccountContext, IDbContextTransaction)
  nameWithType: UserRoleViewModel.ExpandView(MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public override void ExpandView(MixCmsAccountContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Overrides Sub ExpandView(_context As MixCmsAccountContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overridden: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId
  commentId: P:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId
  id: UserId
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: UserId
  nameWithType: UserRoleViewModel.UserId
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId
  type: Property
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public string UserId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property UserId As String
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId
  commentId: P:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId
  id: RoleId
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: RoleId
  nameWithType: UserRoleViewModel.RoleId
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId
  type: Property
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public string RoleId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RoleId As String
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId
  commentId: P:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId
  id: ApplicationUserId
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: ApplicationUserId
  nameWithType: UserRoleViewModel.ApplicationUserId
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId
  type: Property
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public string ApplicationUserId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ApplicationUserId As String
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role
  commentId: P:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role
  id: Role
  parent: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  langs:
  - csharp
  - vb
  name: Role
  nameWithType: UserRoleViewModel.Role
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role
  type: Property
  source:
    path: Mix.Cms.Lib
    isExternal: true
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.Account
  syntax:
    content: public RoleViewModel Role { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
    content.vb: Public Property Role As RoleViewModel
  overload: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Mix.Cms.Lib.ViewModels.Account
  commentId: N:Mix.Cms.Lib.ViewModels.Account
  isExternal: true
  name: Mix.Cms.Lib.ViewModels.Account
  nameWithType: Mix.Cms.Lib.ViewModels.Account
  fullName: Mix.Cms.Lib.ViewModels.Account
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  commentId: T:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  parent: Mix.Domain.Data.ViewModels
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3
  name: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel)
  name.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.IViewModel
  commentId: T:Mix.Domain.Data.ViewModels.IViewModel
  parent: Mix.Domain.Data.ViewModels
  isExternal: true
  name: IViewModel
  nameWithType: IViewModel
  fullName: Mix.Domain.Data.ViewModels.IViewModel
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Repository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Repository
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  name: Repository
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Repository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Repository
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Repository
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Repository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitModel
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitModel
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  name: InitModel()
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.InitModel()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.InitModel()
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).InitModel()
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).InitModel()
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseModel(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseModel(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseModel(MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ParseModel(MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ParseModel(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ParseModel(MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ParseModel(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Validate(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Validate(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Validate(MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Validate(MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Validate(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Validate(MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Validate(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandViewAsync(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandViewAsync(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ExpandViewAsync(MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ExpandViewAsync(MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ExpandViewAsync(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ExpandViewAsync(MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ExpandViewAsync(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandViewAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ExpandViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ExpandViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandViewAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ExpandViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ExpandViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitViewAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitViewAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: InitViewAsync(AspNetUserRoles, Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.InitViewAsync(AspNetUserRoles, Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.InitViewAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).InitViewAsync(AspNetUserRoles, Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).InitViewAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitViewAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.InitViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.InitViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitViewAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).InitViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).InitViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseViewAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseViewAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseViewAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ParseViewAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ParseViewAsync(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ParseViewAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ParseViewAsync(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseViewAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ParseViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ParseViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseViewAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ParseViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ParseViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CloneAsync(AspNetUserRoles, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.CloneAsync(AspNetUserRoles, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.CloneAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).CloneAsync(AspNetUserRoles, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).CloneAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneAsync(AspNetUserRoles, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneSubModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneSubModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CloneSubModelsAsync(UserRoleViewModel, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.CloneSubModelsAsync(UserRoleViewModel, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.CloneSubModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).CloneSubModelsAsync(UserRoleViewModel, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).CloneSubModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModelsAsync(UserRoleViewModel, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModelAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveModelAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveModelAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveRelatedModelsAsync(UserRoleViewModel, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveRelatedModelsAsync(UserRoleViewModel, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveRelatedModelsAsync(UserRoleViewModel, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModelAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveModelAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveModelAsync(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModelsAsync(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveSubModelsAsync(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveSubModelsAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveSubModelsAsync(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveSubModelsAsync(Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitView(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.InitView(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: InitView(AspNetUserRoles, Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.InitView(AspNetUserRoles, Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.InitView(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).InitView(AspNetUserRoles, Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).InitView(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseView(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ParseView(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseView(Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ParseView(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ParseView(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ParseView(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ParseView(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ExpandView(MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ExpandView(MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ExpandView(MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ExpandView(Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Clone(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Clone(Mix.Cms.Lib.Models.Account.AspNetUserRoles,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Clone(AspNetUserRoles, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Clone(AspNetUserRoles, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Clone(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Clone(AspNetUserRoles, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Clone(Mix.Cms.Lib.Models.Account.AspNetUserRoles, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Clone(AspNetUserRoles, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneSubModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.CloneSubModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CloneSubModels(UserRoleViewModel, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.CloneSubModels(UserRoleViewModel, List<SupportedCulture>, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.CloneSubModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).CloneSubModels(UserRoleViewModel, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).CloneSubModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModels(UserRoleViewModel, List(Of SupportedCulture), MixCmsAccountContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveModel(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveModel(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModel(Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveModel(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveModel(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveModel(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveModel(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveRelatedModels(UserRoleViewModel, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveRelatedModels(UserRoleViewModel, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveRelatedModels(UserRoleViewModel, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveRelatedModels(Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    name: UserRoleViewModel
    nameWithType: UserRoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveModel(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveModel(System.Boolean,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModel(Boolean, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveModel(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveModel(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveModel(Boolean, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveModel(System.Boolean, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveSubModels(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.SaveSubModels(Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModels(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveSubModels(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveSubModels(Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveSubModels(AspNetUserRoles, MixCmsAccountContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveSubModels(Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    name: AspNetUserRoles
    nameWithType: AspNetUserRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    name: MixCmsAccountContext
    nameWithType: MixCmsAccountContext
    fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Exception
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Exception
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  name: Exception
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Exception
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Exception
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Exception
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Exception
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsClone
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsClone
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  name: IsClone
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.IsClone
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.IsClone
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).IsClone
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).IsClone
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsLazyLoad
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsLazyLoad
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  name: IsLazyLoad
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.IsLazyLoad
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.IsLazyLoad
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).IsLazyLoad
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).IsLazyLoad
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Cultures
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Cultures
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  name: Cultures
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Cultures
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Cultures
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Cultures
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Cultures
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Mapper
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Mapper
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  name: Mapper
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Mapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Mapper
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Mapper
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Mapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Model
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Model
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  name: Model
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Model
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Model
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Model
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Model
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ModelMapper
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.ModelMapper
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  name: ModelMapper
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.ModelMapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.ModelMapper
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).ModelMapper
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).ModelMapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Priority
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Priority
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  name: Priority
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Priority
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Priority
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Priority
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Priority
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Specificulture
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Specificulture
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  name: Specificulture
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Specificulture
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Specificulture
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Specificulture
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Specificulture
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Errors
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.Errors
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  name: Errors
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.Errors
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.Errors
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).Errors
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).Errors
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsValid
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}.IsValid
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Account.MixCmsAccountContext,Mix.Cms.Lib.Models.Account.AspNetUserRoles,Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  name: IsValid
  nameWithType: ViewModelBase<MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel>.IsValid
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel>.IsValid
  nameWithType.vb: ViewModelBase(Of MixCmsAccountContext, AspNetUserRoles, UserRoleViewModel).IsValid
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Account.MixCmsAccountContext, Mix.Cms.Lib.Models.Account.AspNetUserRoles, Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel).IsValid
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
  commentId: T:Mix.Domain.Data.ViewModels.ViewModelBase`3
  isExternal: true
  name: ViewModelBase<TDbContext, TModel, TView>
  nameWithType: ViewModelBase<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView)
  name.vb: ViewModelBase(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels
  commentId: N:Mix.Domain.Data.ViewModels
  isExternal: true
  name: Mix.Domain.Data.ViewModels
  nameWithType: Mix.Domain.Data.ViewModels
  fullName: Mix.Domain.Data.ViewModels
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  isExternal: true
  name: Repository
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Repository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Repository
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Repository
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Repository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  isExternal: true
  name: InitModel()
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitModel()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitModel()
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitModel()
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitModel()
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseModel(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseModel(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseModel(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseModel(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseModel(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Validate(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Validate(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Validate(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Validate(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Validate(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ExpandViewAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandViewAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandViewAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: InitViewAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitViewAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitViewAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitViewAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitViewAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseViewAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseViewAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseViewAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CloneAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneAsync(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneAsync(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CloneSubModelsAsync(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync(TView, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync(TView, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModelsAsync(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitView(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitView(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseView(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseView(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseView(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseView(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseView(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ExpandView(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandView(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandView(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandView(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandView(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Clone(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Clone(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Clone(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Clone(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Clone(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Clone(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CloneSubModels(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModels(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModels(TView, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels(TView, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModels(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModel(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModels(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  isExternal: true
  name: Exception
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Exception
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Exception
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Exception
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Exception
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  isExternal: true
  name: IsClone
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsClone
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsClone
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsClone
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsClone
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  isExternal: true
  name: IsLazyLoad
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsLazyLoad
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsLazyLoad
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsLazyLoad
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsLazyLoad
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  isExternal: true
  name: Cultures
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Cultures
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Cultures
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Cultures
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Cultures
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  isExternal: true
  name: Mapper
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Mapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Mapper
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Mapper
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Mapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  isExternal: true
  name: Model
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Model
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Model
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Model
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Model
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  isExternal: true
  name: ModelMapper
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ModelMapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ModelMapper
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ModelMapper
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ModelMapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  isExternal: true
  name: Priority
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Priority
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Priority
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Priority
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Priority
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  isExternal: true
  name: Specificulture
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Specificulture
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Specificulture
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Specificulture
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Specificulture
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  isExternal: true
  name: Errors
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Errors
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Errors
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Errors
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Errors
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  isExternal: true
  name: IsValid
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsValid
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsValid
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsValid
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsValid
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor*
  commentId: Overload:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.#ctor
  isExternal: true
  name: UserRoleViewModel
  nameWithType: UserRoleViewModel.UserRoleViewModel
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserRoleViewModel
- uid: Mix.Cms.Lib.Models.Account.AspNetUserRoles
  commentId: T:Mix.Cms.Lib.Models.Account.AspNetUserRoles
  parent: Mix.Cms.Lib.Models.Account
  isExternal: true
  name: AspNetUserRoles
  nameWithType: AspNetUserRoles
  fullName: Mix.Cms.Lib.Models.Account.AspNetUserRoles
- uid: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
  commentId: T:Mix.Cms.Lib.Models.Account.MixCmsAccountContext
  parent: Mix.Cms.Lib.Models.Account
  isExternal: true
  name: MixCmsAccountContext
  nameWithType: MixCmsAccountContext
  fullName: Mix.Cms.Lib.Models.Account.MixCmsAccountContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: Mix.Cms.Lib.Models.Account
  commentId: N:Mix.Cms.Lib.Models.Account
  isExternal: true
  name: Mix.Cms.Lib.Models.Account
  nameWithType: Mix.Cms.Lib.Models.Account
  fullName: Mix.Cms.Lib.Models.Account
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView*
  commentId: Overload:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView
  isExternal: true
  name: ExpandView
  nameWithType: UserRoleViewModel.ExpandView
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ExpandView
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId*
  commentId: Overload:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId
  isExternal: true
  name: UserId
  nameWithType: UserRoleViewModel.UserId
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.UserId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId*
  commentId: Overload:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId
  isExternal: true
  name: RoleId
  nameWithType: UserRoleViewModel.RoleId
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.RoleId
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId*
  commentId: Overload:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId
  isExternal: true
  name: ApplicationUserId
  nameWithType: UserRoleViewModel.ApplicationUserId
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.ApplicationUserId
- uid: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role*
  commentId: Overload:Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role
  isExternal: true
  name: Role
  nameWithType: UserRoleViewModel.Role
  fullName: Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel.Role
- uid: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.Account.RoleViewModel
  parent: Mix.Cms.Lib.ViewModels.Account
  isExternal: true
  name: RoleViewModel
  nameWithType: RoleViewModel
  fullName: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
