### YamlMime:ManagedReference
items:
- uid: Mix.UI.Base.ApiHelper`1
  commentId: T:Mix.UI.Base.ApiHelper`1
  id: ApiHelper`1
  parent: Mix.UI.Base
  children:
  - Mix.UI.Base.ApiHelper`1.GetResult(System.Int32,`0,System.String,System.Collections.Generic.List{System.String})
  langs:
  - csharp
  - vb
  name: ApiHelper<T>
  nameWithType: ApiHelper<T>
  fullName: Mix.UI.Base.ApiHelper<T>
  type: Class
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.UI.Base
  syntax:
    content: 'public static class ApiHelper<T> : Object'
    typeParameters:
    - id: T
    content.vb: >-
      Public Module ApiHelper(Of T)
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: ApiHelper(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: Mix.UI.Base.ApiHelper(Of T)
  name.vb: ApiHelper(Of T)
- uid: Mix.UI.Base.ApiHelper`1.GetResult(System.Int32,`0,System.String,System.Collections.Generic.List{System.String})
  commentId: M:Mix.UI.Base.ApiHelper`1.GetResult(System.Int32,`0,System.String,System.Collections.Generic.List{System.String})
  id: GetResult(System.Int32,`0,System.String,System.Collections.Generic.List{System.String})
  parent: Mix.UI.Base.ApiHelper`1
  langs:
  - csharp
  - vb
  name: GetResult(Int32, T, String, List<String>)
  nameWithType: ApiHelper<T>.GetResult(Int32, T, String, List<String>)
  fullName: Mix.UI.Base.ApiHelper<T>.GetResult(System.Int32, T, System.String, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.UI.Base
  syntax:
    content: public static RepositoryResponse<T> GetResult(int status, T data, string responseKey, List<string> errors)
    parameters:
    - id: status
      type: System.Int32
    - id: data
      type: '{T}'
    - id: responseKey
      type: System.String
    - id: errors
      type: System.Collections.Generic.List{System.String}
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{{T}}
    content.vb: Public Shared Function GetResult(status As Integer, data As T, responseKey As String, errors As List(Of String)) As RepositoryResponse(Of T)
  overload: Mix.UI.Base.ApiHelper`1.GetResult*
  nameWithType.vb: ApiHelper(Of T).GetResult(Int32, T, String, List(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.UI.Base.ApiHelper(Of T).GetResult(System.Int32, T, System.String, System.Collections.Generic.List(Of System.String))
  name.vb: GetResult(Int32, T, String, List(Of String))
references:
- uid: Mix.UI.Base
  commentId: N:Mix.UI.Base
  isExternal: true
  name: Mix.UI.Base
  nameWithType: Mix.UI.Base
  fullName: Mix.UI.Base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.UI.Base.ApiHelper`1.GetResult*
  commentId: Overload:Mix.UI.Base.ApiHelper`1.GetResult
  isExternal: true
  name: GetResult
  nameWithType: ApiHelper<T>.GetResult
  fullName: Mix.UI.Base.ApiHelper<T>.GetResult
  nameWithType.vb: ApiHelper(Of T).GetResult
  fullName.vb: Mix.UI.Base.ApiHelper(Of T).GetResult
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{System.String}
  commentId: '!:System.Collections.Generic.List{System.String}'
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse{{T}}
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse{`0}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<T>
  nameWithType: RepositoryResponse<T>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<T>
  nameWithType.vb: RepositoryResponse(Of T)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of T)
  name.vb: RepositoryResponse(Of T)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse`1
  isExternal: true
  name: RepositoryResponse<TResult>
  nameWithType: RepositoryResponse<TResult>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<TResult>
  nameWithType.vb: RepositoryResponse(Of TResult)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of TResult)
  name.vb: RepositoryResponse(Of TResult)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels
  commentId: N:Mix.Domain.Core.ViewModels
  isExternal: true
  name: Mix.Domain.Core.ViewModels
  nameWithType: Mix.Domain.Core.ViewModels
  fullName: Mix.Domain.Core.ViewModels
