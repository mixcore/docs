### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController
  commentId: T:Mix.Cms.Api.Controllers.v1.ApiRoleController
  id: ApiRoleController
  parent: Mix.Cms.Api.Controllers.v1
  children:
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController},Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub})
  - Mix.Cms.Api.Controllers.v1.ApiRoleController._emailSender
  - Mix.Cms.Api.Controllers.v1.ApiRoleController._logger
  - Mix.Cms.Api.Controllers.v1.ApiRoleController._roleManager
  - Mix.Cms.Api.Controllers.v1.ApiRoleController._signInManager
  - Mix.Cms.Api.Controllers.v1.ApiRoleController._userManager
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete(System.String)
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails(System.String,System.String)
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel)
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(System.String)
  - Mix.Cms.Api.Controllers.v1.ApiRoleController.Update(Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel)
  langs:
  - csharp
  - vb
  name: ApiRoleController
  nameWithType: ApiRoleController
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController
  type: Class
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: 'public class ApiRoleController : BaseApiController'
    content.vb: >-
      Public Class ApiRoleController
          Inherits BaseApiController
  inheritance:
  - System.Object
  - Mix.Cms.Api.Controllers.v1.BaseApiController
  inheritedMembers:
  - Mix.Cms.Api.Controllers.v1.BaseApiController._hubContext
  - Mix.Cms.Api.Controllers.v1.BaseApiController._memoryCache
  - Mix.Cms.Api.Controllers.v1.BaseApiController._lang
  - Mix.Cms.Api.Controllers.v1.BaseApiController._domain
  - Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  - Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync(System.String,System.Int32,System.String)
  - Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate(Mix.Domain.Core.ViewModels.RequestPaging)
  - Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController._userManager
  commentId: F:Mix.Cms.Api.Controllers.v1.ApiRoleController._userManager
  id: _userManager
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: _userManager
  nameWithType: ApiRoleController._userManager
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController._userManager
  type: Field
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: protected readonly UserManager<ApplicationUser> _userManager
    return:
      type: Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser}
    content.vb: Protected ReadOnly _userManager As UserManager(Of ApplicationUser)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController._signInManager
  commentId: F:Mix.Cms.Api.Controllers.v1.ApiRoleController._signInManager
  id: _signInManager
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: _signInManager
  nameWithType: ApiRoleController._signInManager
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController._signInManager
  type: Field
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: protected readonly SignInManager<ApplicationUser> _signInManager
    return:
      type: Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser}
    content.vb: Protected ReadOnly _signInManager As SignInManager(Of ApplicationUser)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController._roleManager
  commentId: F:Mix.Cms.Api.Controllers.v1.ApiRoleController._roleManager
  id: _roleManager
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: _roleManager
  nameWithType: ApiRoleController._roleManager
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController._roleManager
  type: Field
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: protected readonly RoleManager<IdentityRole> _roleManager
    return:
      type: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}
    content.vb: Protected ReadOnly _roleManager As RoleManager(Of IdentityRole)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController._emailSender
  commentId: F:Mix.Cms.Api.Controllers.v1.ApiRoleController._emailSender
  id: _emailSender
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: _emailSender
  nameWithType: ApiRoleController._emailSender
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController._emailSender
  type: Field
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: protected readonly IEmailSender _emailSender
    return:
      type: Microsoft.AspNetCore.Identity.UI.Services.IEmailSender
    content.vb: Protected ReadOnly _emailSender As IEmailSender
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController._logger
  commentId: F:Mix.Cms.Api.Controllers.v1.ApiRoleController._logger
  id: _logger
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: _logger
  nameWithType: ApiRoleController._logger
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController._logger
  type: Field
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: protected readonly ILogger _logger
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly _logger As ILogger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController},Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub})
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController},Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub})
  id: '#ctor(Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController},Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub})'
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: ApiRoleController(UserManager<ApplicationUser>, SignInManager<ApplicationUser>, RoleManager<IdentityRole>, IEmailSender, ILogger<ApiRoleController>, IHubContext<PortalHub>)
  nameWithType: ApiRoleController.ApiRoleController(UserManager<ApplicationUser>, SignInManager<ApplicationUser>, RoleManager<IdentityRole>, IEmailSender, ILogger<ApiRoleController>, IHubContext<PortalHub>)
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.ApiRoleController(Microsoft.AspNetCore.Identity.UserManager<Mix.Identity.Models.ApplicationUser>, Microsoft.AspNetCore.Identity.SignInManager<Mix.Identity.Models.ApplicationUser>, Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.IdentityRole>, Microsoft.AspNetCore.Identity.UI.Services.IEmailSender, Microsoft.Extensions.Logging.ILogger<Mix.Cms.Api.Controllers.v1.ApiRoleController>, Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Hub.PortalHub>)
  type: Constructor
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public ApiRoleController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, RoleManager<IdentityRole> roleManager, IEmailSender emailSender, ILogger<ApiRoleController> logger, IHubContext<PortalHub> hubContext)
    parameters:
    - id: userManager
      type: Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser}
    - id: signInManager
      type: Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser}
    - id: roleManager
      type: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}
    - id: emailSender
      type: Microsoft.AspNetCore.Identity.UI.Services.IEmailSender
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController}
    - id: hubContext
      type: Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub}
    content.vb: Public Sub New(userManager As UserManager(Of ApplicationUser), signInManager As SignInManager(Of ApplicationUser), roleManager As RoleManager(Of IdentityRole), emailSender As IEmailSender, logger As ILogger(Of ApiRoleController), hubContext As IHubContext(Of PortalHub))
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.#ctor*
  nameWithType.vb: ApiRoleController.ApiRoleController(UserManager(Of ApplicationUser), SignInManager(Of ApplicationUser), RoleManager(Of IdentityRole), IEmailSender, ILogger(Of ApiRoleController), IHubContext(Of PortalHub))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Api.Controllers.v1.ApiRoleController.ApiRoleController(Microsoft.AspNetCore.Identity.UserManager(Of Mix.Identity.Models.ApplicationUser), Microsoft.AspNetCore.Identity.SignInManager(Of Mix.Identity.Models.ApplicationUser), Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.IdentityRole), Microsoft.AspNetCore.Identity.UI.Services.IEmailSender, Microsoft.Extensions.Logging.ILogger(Of Mix.Cms.Api.Controllers.v1.ApiRoleController), Microsoft.AspNetCore.SignalR.IHubContext(Of Mix.Cms.Hub.PortalHub))
  name.vb: ApiRoleController(UserManager(Of ApplicationUser), SignInManager(Of ApplicationUser), RoleManager(Of IdentityRole), IEmailSender, ILogger(Of ApiRoleController), IHubContext(Of PortalHub))
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims
  id: Claims
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: Claims()
  nameWithType: ApiRoleController.Claims()
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims()
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public object Claims()
    return:
      type: System.Object
    content.vb: Public Function Claims As Object
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails(System.String,System.String)
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails(System.String,System.String)
  id: GetDetails(System.String,System.String)
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: GetDetails(String, String)
  nameWithType: ApiRoleController.GetDetails(String, String)
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails(System.String, System.String)
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<JObject> GetDetails(string viewType, string id)
    parameters:
    - id: viewType
      type: System.String
    - id: id
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}
    content.vb: Public Function GetDetails(viewType As String, id As String) As Task(Of JObject)
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions
  id: GetPermissions
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: GetPermissions()
  nameWithType: ApiRoleController.GetPermissions()
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions()
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<JObject> GetPermissions()
    return:
      type: System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}
    content.vb: Public Function GetPermissions As Task(Of JObject)
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList
  id: GetList
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: GetList()
  nameWithType: ApiRoleController.GetList()
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList()
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<RepositoryResponse<List<RoleViewModel>>> GetList()
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.Account.RoleViewModel}}}
    content.vb: Public Function GetList As Task(Of RepositoryResponse(Of List(Of RoleViewModel)))
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(System.String)
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(System.String)
  id: Save(System.String)
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: Save(String)
  nameWithType: ApiRoleController.Save(String)
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(System.String)
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<RepositoryResponse<IdentityRole>> Save(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Microsoft.AspNetCore.Identity.IdentityRole}}
    content.vb: Public Function Save(name As String) As Task(Of RepositoryResponse(Of IdentityRole))
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel)
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel)
  id: Save(Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel)
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: Save(UpdateViewModel)
  nameWithType: ApiRoleController.Save(UpdateViewModel)
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save(Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel)
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<RepositoryResponse<UpdateViewModel>> Save(UpdateViewModel model)
    parameters:
    - id: model
      type: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel}}
    content.vb: Public Function Save(model As UpdateViewModel) As Task(Of RepositoryResponse(Of UpdateViewModel))
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Update(Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel)
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.Update(Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel)
  id: Update(Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel)
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: Update(ReadViewModel)
  nameWithType: ApiRoleController.Update(ReadViewModel)
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Update(Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel)
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<RepositoryResponse<ReadViewModel>> Update(ReadViewModel model)
    parameters:
    - id: model
      type: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel}}
    content.vb: Public Function Update(model As ReadViewModel) As Task(Of RepositoryResponse(Of ReadViewModel))
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete(System.String)
  commentId: M:Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete(System.String)
  id: Delete(System.String)
  parent: Mix.Cms.Api.Controllers.v1.ApiRoleController
  langs:
  - csharp
  - vb
  name: Delete(String)
  nameWithType: ApiRoleController.Delete(String)
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete(System.String)
  type: Method
  source:
    path: Mix.Cms.Api
    isExternal: true
  assemblies:
  - Mix.Cms.Api
  namespace: Mix.Cms.Api.Controllers.v1
  syntax:
    content: public Task<RepositoryResponse<AspNetRoles>> Delete(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.Models.Account.AspNetRoles}}
    content.vb: Public Function Delete(name As String) As Task(Of RepositoryResponse(Of AspNetRoles))
  overload: Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.Cms.Api.Controllers.v1
  commentId: N:Mix.Cms.Api.Controllers.v1
  isExternal: true
  name: Mix.Cms.Api.Controllers.v1
  nameWithType: Mix.Cms.Api.Controllers.v1
  fullName: Mix.Cms.Api.Controllers.v1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController
  commentId: T:Mix.Cms.Api.Controllers.v1.BaseApiController
  parent: Mix.Cms.Api.Controllers.v1
  isExternal: true
  name: BaseApiController
  nameWithType: BaseApiController
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController._hubContext
  commentId: F:Mix.Cms.Api.Controllers.v1.BaseApiController._hubContext
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: _hubContext
  nameWithType: BaseApiController._hubContext
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController._hubContext
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController._memoryCache
  commentId: F:Mix.Cms.Api.Controllers.v1.BaseApiController._memoryCache
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: _memoryCache
  nameWithType: BaseApiController._memoryCache
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController._memoryCache
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController._lang
  commentId: F:Mix.Cms.Api.Controllers.v1.BaseApiController._lang
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: _lang
  nameWithType: BaseApiController._lang
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController._lang
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController._domain
  commentId: F:Mix.Cms.Api.Controllers.v1.BaseApiController._domain
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: _domain
  nameWithType: BaseApiController._domain
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController._domain
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  commentId: M:Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: OnActionExecuting(ActionExecutingContext)
  nameWithType: BaseApiController.OnActionExecuting(ActionExecutingContext)
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  spec.csharp:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    name: OnActionExecuting
    nameWithType: BaseApiController.OnActionExecuting
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    name: ActionExecutingContext
    nameWithType: ActionExecutingContext
    fullName: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    name: OnActionExecuting
    nameWithType: BaseApiController.OnActionExecuting
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.OnActionExecuting
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    name: ActionExecutingContext
    nameWithType: ActionExecutingContext
    fullName: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync(System.String,System.Int32,System.String)
  commentId: M:Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync(System.String,System.Int32,System.String)
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: AlertAsync(String, Int32, String)
  nameWithType: BaseApiController.AlertAsync(String, Int32, String)
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync(System.String, System.Int32, System.String)
  spec.csharp:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync(System.String,System.Int32,System.String)
    name: AlertAsync
    nameWithType: BaseApiController.AlertAsync
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync(System.String,System.Int32,System.String)
    name: AlertAsync
    nameWithType: BaseApiController.AlertAsync
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.AlertAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate(Mix.Domain.Core.ViewModels.RequestPaging)
  commentId: M:Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate(Mix.Domain.Core.ViewModels.RequestPaging)
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: ParseRequestPagingDate(RequestPaging)
  nameWithType: BaseApiController.ParseRequestPagingDate(RequestPaging)
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate(Mix.Domain.Core.ViewModels.RequestPaging)
  spec.csharp:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate(Mix.Domain.Core.ViewModels.RequestPaging)
    name: ParseRequestPagingDate
    nameWithType: BaseApiController.ParseRequestPagingDate
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Domain.Core.ViewModels.RequestPaging
    name: RequestPaging
    nameWithType: RequestPaging
    fullName: Mix.Domain.Core.ViewModels.RequestPaging
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate(Mix.Domain.Core.ViewModels.RequestPaging)
    name: ParseRequestPagingDate
    nameWithType: BaseApiController.ParseRequestPagingDate
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.ParseRequestPagingDate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Domain.Core.ViewModels.RequestPaging
    name: RequestPaging
    nameWithType: RequestPaging
    fullName: Mix.Domain.Core.ViewModels.RequestPaging
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
  commentId: M:Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
  parent: Mix.Cms.Api.Controllers.v1.BaseApiController
  isExternal: true
  name: GetLanguage()
  nameWithType: BaseApiController.GetLanguage()
  fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage()
  spec.csharp:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
    name: GetLanguage
    nameWithType: BaseApiController.GetLanguage
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
    name: GetLanguage
    nameWithType: BaseApiController.GetLanguage
    fullName: Mix.Cms.Api.Controllers.v1.BaseApiController.GetLanguage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser}
  commentId: '!:Microsoft.AspNetCore.Identity.UserManager{Mix.Identity.Models.ApplicationUser}'
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<ApplicationUser>
  nameWithType: UserManager<ApplicationUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<Mix.Identity.Models.ApplicationUser>
  nameWithType.vb: UserManager(Of ApplicationUser)
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of Mix.Identity.Models.ApplicationUser)
  name.vb: UserManager(Of ApplicationUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Mix.Identity.Models.ApplicationUser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Mix.Identity.Models.ApplicationUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: true
  name: UserManager<>
  nameWithType: UserManager<>
  fullName: Microsoft.AspNetCore.Identity.UserManager<>
  nameWithType.vb: UserManager(Of )
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of )
  name.vb: UserManager(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser}
  commentId: '!:Microsoft.AspNetCore.Identity.SignInManager{Mix.Identity.Models.ApplicationUser}'
  definition: Microsoft.AspNetCore.Identity.SignInManager`1
  name: SignInManager<ApplicationUser>
  nameWithType: SignInManager<ApplicationUser>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<Mix.Identity.Models.ApplicationUser>
  nameWithType.vb: SignInManager(Of ApplicationUser)
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of Mix.Identity.Models.ApplicationUser)
  name.vb: SignInManager(Of ApplicationUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Mix.Identity.Models.ApplicationUser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Mix.Identity.Models.ApplicationUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.SignInManager`1
  isExternal: true
  name: SignInManager<>
  nameWithType: SignInManager<>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<>
  nameWithType.vb: SignInManager(Of )
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of )
  name.vb: SignInManager(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}
  commentId: '!:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}'
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<IdentityRole>
  nameWithType: RoleManager<IdentityRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.IdentityRole>
  nameWithType.vb: RoleManager(Of IdentityRole)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.IdentityRole)
  name.vb: RoleManager(Of IdentityRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityRole
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityRole
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: true
  name: RoleManager<>
  nameWithType: RoleManager<>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<>
  nameWithType.vb: RoleManager(Of )
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of )
  name.vb: RoleManager(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UI.Services.IEmailSender
  isExternal: true
  name: IEmailSender
  nameWithType: IEmailSender
  fullName: Microsoft.AspNetCore.Identity.UI.Services.IEmailSender
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: '!:Microsoft.Extensions.Logging.ILogger'
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.#ctor*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.#ctor
  isExternal: true
  name: ApiRoleController
  nameWithType: ApiRoleController.ApiRoleController
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.ApiRoleController
- uid: Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{Mix.Cms.Api.Controllers.v1.ApiRoleController}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<ApiRoleController>
  nameWithType: ILogger<ApiRoleController>
  fullName: Microsoft.Extensions.Logging.ILogger<Mix.Cms.Api.Controllers.v1.ApiRoleController>
  nameWithType.vb: ILogger(Of ApiRoleController)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Mix.Cms.Api.Controllers.v1.ApiRoleController)
  name.vb: ILogger(Of ApiRoleController)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Api.Controllers.v1.ApiRoleController
    name: ApiRoleController
    nameWithType: ApiRoleController
    fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Api.Controllers.v1.ApiRoleController
    name: ApiRoleController
    nameWithType: ApiRoleController
    fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub}
  commentId: '!:Microsoft.AspNetCore.SignalR.IHubContext{Mix.Cms.Hub.PortalHub}'
  definition: Microsoft.AspNetCore.SignalR.IHubContext`1
  name: IHubContext<PortalHub>
  nameWithType: IHubContext<PortalHub>
  fullName: Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Hub.PortalHub>
  nameWithType.vb: IHubContext(Of PortalHub)
  fullName.vb: Microsoft.AspNetCore.SignalR.IHubContext(Of Mix.Cms.Hub.PortalHub)
  name.vb: IHubContext(Of PortalHub)
  spec.csharp:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Hub.PortalHub
    name: PortalHub
    nameWithType: PortalHub
    fullName: Mix.Cms.Hub.PortalHub
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Hub.PortalHub
    name: PortalHub
    nameWithType: PortalHub
    fullName: Mix.Cms.Hub.PortalHub
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.SignalR.IHubContext`1
  isExternal: true
  name: IHubContext<>
  nameWithType: IHubContext<>
  fullName: Microsoft.AspNetCore.SignalR.IHubContext<>
  nameWithType.vb: IHubContext(Of )
  fullName.vb: Microsoft.AspNetCore.SignalR.IHubContext(Of )
  name.vb: IHubContext(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims
  isExternal: true
  name: Claims
  nameWithType: ApiRoleController.Claims
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Claims
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails
  isExternal: true
  name: GetDetails
  nameWithType: ApiRoleController.GetDetails
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetDetails
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}
  commentId: '!:System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}'
  definition: System.Threading.Tasks.Task`1
  name: Task<JObject>
  nameWithType: Task<JObject>
  fullName: System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JObject>
  nameWithType.vb: Task(Of JObject)
  fullName.vb: System.Threading.Tasks.Task(Of Newtonsoft.Json.Linq.JObject)
  name.vb: Task(Of JObject)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions
  isExternal: true
  name: GetPermissions
  nameWithType: ApiRoleController.GetPermissions
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetPermissions
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList
  isExternal: true
  name: GetList
  nameWithType: ApiRoleController.GetList
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.GetList
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.Account.RoleViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.Account.RoleViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<RoleViewModel>>>
  nameWithType: Task<RepositoryResponse<List<RoleViewModel>>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.Account.RoleViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of RoleViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.Account.RoleViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of RoleViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
    name: RoleViewModel
    nameWithType: RoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
    name: RoleViewModel
    nameWithType: RoleViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.RoleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.Save
  isExternal: true
  name: Save
  nameWithType: ApiRoleController.Save
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Save
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Microsoft.AspNetCore.Identity.IdentityRole}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Microsoft.AspNetCore.Identity.IdentityRole}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<IdentityRole>>
  nameWithType: Task<RepositoryResponse<IdentityRole>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<Microsoft.AspNetCore.Identity.IdentityRole>>
  nameWithType.vb: Task(Of RepositoryResponse(Of IdentityRole))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of Microsoft.AspNetCore.Identity.IdentityRole))
  name.vb: Task(Of RepositoryResponse(Of IdentityRole))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityRole
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityRole
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
  parent: Mix.Cms.Lib.ViewModels.Account.MixRoles
  isExternal: true
  name: UpdateViewModel
  nameWithType: UpdateViewModel
  fullName: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<UpdateViewModel>>
  nameWithType: Task<RepositoryResponse<UpdateViewModel>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel>>
  nameWithType.vb: Task(Of RepositoryResponse(Of UpdateViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel))
  name.vb: Task(Of RepositoryResponse(Of UpdateViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.Account.MixRoles
  commentId: N:Mix.Cms.Lib.ViewModels.Account.MixRoles
  isExternal: true
  name: Mix.Cms.Lib.ViewModels.Account.MixRoles
  nameWithType: Mix.Cms.Lib.ViewModels.Account.MixRoles
  fullName: Mix.Cms.Lib.ViewModels.Account.MixRoles
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Update*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.Update
  isExternal: true
  name: Update
  nameWithType: ApiRoleController.Update
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Update
- uid: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
  parent: Mix.Cms.Lib.ViewModels.MixPortalPageRoles
  isExternal: true
  name: ReadViewModel
  nameWithType: ReadViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<ReadViewModel>>
  nameWithType: Task<RepositoryResponse<ReadViewModel>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel>>
  nameWithType.vb: Task(Of RepositoryResponse(Of ReadViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel))
  name.vb: Task(Of RepositoryResponse(Of ReadViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
    name: ReadViewModel
    nameWithType: ReadViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
    name: ReadViewModel
    nameWithType: ReadViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixPortalPageRoles
  commentId: N:Mix.Cms.Lib.ViewModels.MixPortalPageRoles
  isExternal: true
  name: Mix.Cms.Lib.ViewModels.MixPortalPageRoles
  nameWithType: Mix.Cms.Lib.ViewModels.MixPortalPageRoles
  fullName: Mix.Cms.Lib.ViewModels.MixPortalPageRoles
- uid: Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete*
  commentId: Overload:Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete
  isExternal: true
  name: Delete
  nameWithType: ApiRoleController.Delete
  fullName: Mix.Cms.Api.Controllers.v1.ApiRoleController.Delete
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.Models.Account.AspNetRoles}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.Models.Account.AspNetRoles}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<AspNetRoles>>
  nameWithType: Task<RepositoryResponse<AspNetRoles>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<Mix.Cms.Lib.Models.Account.AspNetRoles>>
  nameWithType.vb: Task(Of RepositoryResponse(Of AspNetRoles))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of Mix.Cms.Lib.Models.Account.AspNetRoles))
  name.vb: Task(Of RepositoryResponse(Of AspNetRoles))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.Account.AspNetRoles
    name: AspNetRoles
    nameWithType: AspNetRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetRoles
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.Account.AspNetRoles
    name: AspNetRoles
    nameWithType: AspNetRoles
    fullName: Mix.Cms.Lib.Models.Account.AspNetRoles
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
