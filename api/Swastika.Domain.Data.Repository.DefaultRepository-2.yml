### YamlMime:ManagedReference
items:
- uid: Swastika.Domain.Data.Repository.DefaultRepository`2
  commentId: T:Swastika.Domain.Data.Repository.DefaultRepository`2
  id: DefaultRepository`2
  parent: Swastika.Domain.Data.Repository
  children:
  - Swastika.Domain.Data.Repository.DefaultRepository`2.Instance
  langs:
  - csharp
  - vb
  name: DefaultRepository<TContext, TModel>
  nameWithType: DefaultRepository<TContext, TModel>
  fullName: Swastika.Domain.Data.Repository.DefaultRepository<TContext, TModel>
  type: Class
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: 'public class DefaultRepository<TContext, TModel> : ModelRepositoryBase<TContext, TModel> where TContext : DbContext where TModel : class'
    typeParameters:
    - id: TContext
    - id: TModel
    content.vb: >-
      Public Class DefaultRepository(Of TContext As DbContext, TModel As Class)
          Inherits ModelRepositoryBase(Of TContext, TModel)
  inheritance:
  - System.Object
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  inheritedMembers:
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CheckIsExists({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CheckIsExists(System.Func{{TModel},System.Boolean},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CreateModel({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CreateModelAsync({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.EditModel({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.EditModelAsync({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetSingleModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.InitContext
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelList({TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListAsync({TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.LogErrorMessage(System.Exception)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveListModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModel({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModelAsync({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveModel({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveModelAsync({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveSubModel({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveSubModelAsync({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetLambda(System.String)
  nameWithType.vb: DefaultRepository(Of TContext, TModel)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Swastika.Domain.Data.Repository.DefaultRepository(Of TContext, TModel)
  name.vb: DefaultRepository(Of TContext, TModel)
- uid: Swastika.Domain.Data.Repository.DefaultRepository`2.Instance
  commentId: P:Swastika.Domain.Data.Repository.DefaultRepository`2.Instance
  id: Instance
  parent: Swastika.Domain.Data.Repository.DefaultRepository`2
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: DefaultRepository<TContext, TModel>.Instance
  fullName: Swastika.Domain.Data.Repository.DefaultRepository<TContext, TModel>.Instance
  type: Property
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public static DefaultRepository<TContext, TModel> Instance { get; }
    parameters: []
    return:
      type: Swastika.Domain.Data.Repository.DefaultRepository`2
    content.vb: Public Shared ReadOnly Property Instance As DefaultRepository(Of TContext, TModel)
  overload: Swastika.Domain.Data.Repository.DefaultRepository`2.Instance*
  nameWithType.vb: DefaultRepository(Of TContext, TModel).Instance
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Swastika.Domain.Data.Repository.DefaultRepository(Of TContext, TModel).Instance
references:
- uid: Swastika.Domain.Data.Repository
  commentId: N:Swastika.Domain.Data.Repository
  isExternal: true
  name: Swastika.Domain.Data.Repository
  nameWithType: Swastika.Domain.Data.Repository
  fullName: Swastika.Domain.Data.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  commentId: T:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}
  parent: Swastika.Domain.Data.Repository
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
  name: ModelRepositoryBase<TContext, TModel>
  nameWithType: ModelRepositoryBase<TContext, TModel>
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel)
  name.vb: ModelRepositoryBase(Of TContext, TModel)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
    name: ModelRepositoryBase
    nameWithType: ModelRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
    name: ModelRepositoryBase
    nameWithType: ModelRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CheckIsExists({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CheckIsExists(TModel, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.CheckIsExists(TModel, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CheckIsExists(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).CheckIsExists(TModel, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CheckIsExists(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase<TContext, TModel>.CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase(Of TContext, TModel).CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CheckIsExists(System.Func{{TModel},System.Boolean},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CheckIsExists(Func<TModel, Boolean>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.CheckIsExists(Func<TModel, Boolean>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CheckIsExists(System.Func<TModel, System.Boolean>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).CheckIsExists(Func(Of TModel, Boolean), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CheckIsExists(System.Func(Of TModel, System.Boolean), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CheckIsExists(Func(Of TModel, Boolean), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase<TContext, TModel>.CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase(Of TContext, TModel).CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CreateModel({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CreateModel(TModel, Boolean, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.CreateModel(TModel, Boolean, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CreateModel(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).CreateModel(TModel, Boolean, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CreateModel(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.CreateModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).CreateModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.CreateModelAsync({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CreateModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.CreateModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CreateModelAsync(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).CreateModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CreateModelAsync(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.CreateModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).CreateModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.EditModel({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: EditModel(TModel, Boolean, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.EditModel(TModel, Boolean, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.EditModel(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).EditModel(TModel, Boolean, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).EditModel(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.EditModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).EditModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.EditModelAsync({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: EditModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.EditModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.EditModelAsync(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).EditModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).EditModelAsync(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.EditModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).EditModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetSingleModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetSingleModel(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetSingleModel(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetSingleModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetSingleModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetSingleModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetSingleModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetSingleModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetSingleModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetSingleModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetSingleModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.InitContext
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.InitContext
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
  name: InitContext()
  nameWithType: ModelRepositoryBase<TContext, TModel>.InitContext()
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.InitContext()
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).InitContext()
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).InitContext()
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
    name: InitContext
    nameWithType: ModelRepositoryBase<TContext, TModel>.InitContext
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
    name: InitContext
    nameWithType: ModelRepositoryBase(Of TContext, TModel).InitContext
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelList({TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelList(TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelList(TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelList(TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelList(TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelList(TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelList(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelList(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelList(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelList(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelList(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelList(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListAsync({TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListAsync(TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListAsync(TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListAsync(TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelListAsync(TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListAsync(TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListAsync(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListAsync(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListAsync(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelListAsync(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListAsync(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListAsync(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListBy(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListBy(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.LogErrorMessage(System.Exception)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.LogErrorMessage(System.Exception)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
  name: LogErrorMessage(Exception)
  nameWithType: ModelRepositoryBase<TContext, TModel>.LogErrorMessage(Exception)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.LogErrorMessage(System.Exception)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).LogErrorMessage(Exception)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).LogErrorMessage(System.Exception)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ModelRepositoryBase<TContext, TModel>.LogErrorMessage
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ModelRepositoryBase(Of TContext, TModel).LogErrorMessage
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveListModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveListModel(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveListModel(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveListModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveListModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveListModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).RemoveListModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveListModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveListModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveListModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).RemoveListModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModel(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModel(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModel(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).RemoveModel(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModel(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModel({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModel(TModel, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModel(TModel, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModel(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).RemoveModel(TModel, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModel(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModelAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModelAsync(Expression<Func<TModel, Boolean>>, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.RemoveModelAsync({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModelAsync(TModel, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModelAsync(TModel, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModelAsync(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync(TModel, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveModel({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModel(TModel, Boolean, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.SaveModel(TModel, Boolean, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveModel(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).SaveModel(TModel, Boolean, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveModel(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.SaveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).SaveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveModelAsync({TModel},System.Boolean,{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.SaveModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveModelAsync(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).SaveModelAsync(TModel, Boolean, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveModelAsync(TModel, System.Boolean, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.SaveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).SaveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveSubModel({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModel(TModel, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.SaveSubModel(TModel, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveSubModel(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).SaveSubModel(TModel, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveSubModel(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModel
    nameWithType: ModelRepositoryBase<TContext, TModel>.SaveSubModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveSubModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModel
    nameWithType: ModelRepositoryBase(Of TContext, TModel).SaveSubModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveSubModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.SaveSubModelAsync({TModel},{TContext},Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModelAsync(TModel, TContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TContext, TModel>.SaveSubModelAsync(TModel, TContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveSubModelAsync(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).SaveSubModelAsync(TModel, TContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveSubModelAsync(TModel, TContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ModelRepositoryBase<TContext, TModel>.SaveSubModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ModelRepositoryBase(Of TContext, TModel).SaveSubModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}.GetLambda(System.String)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase{`0,`1}.GetLambda(System.String)
  parent: Swastika.Domain.Data.Repository.ModelRepositoryBase{{TContext},{TModel}}
  definition: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
  name: GetLambda(String)
  nameWithType: ModelRepositoryBase<TContext, TModel>.GetLambda(String)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetLambda(System.String)
  nameWithType.vb: ModelRepositoryBase(Of TContext, TModel).GetLambda(String)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetLambda(System.String)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
    name: GetLambda
    nameWithType: ModelRepositoryBase<TContext, TModel>.GetLambda
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TContext, TModel>.GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
    name: GetLambda
    nameWithType: ModelRepositoryBase(Of TContext, TModel).GetLambda
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TContext, TModel).GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
  commentId: T:Swastika.Domain.Data.Repository.ModelRepositoryBase`2
  isExternal: true
  name: ModelRepositoryBase<TDbContext, TModel>
  nameWithType: ModelRepositoryBase<TDbContext, TModel>
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel)
  name.vb: ModelRepositoryBase(Of TDbContext, TModel)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
    name: ModelRepositoryBase
    nameWithType: ModelRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
    name: ModelRepositoryBase
    nameWithType: ModelRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CheckIsExists(System.Func<TModel, System.Boolean>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists(System.Func(Of TModel, System.Boolean), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CheckIsExists
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CheckIsExists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CreateModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.CreateModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CreateModel(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).CreateModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CreateModel(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.CreateModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).CreateModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CreateModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CreateModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.CreateModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CreateModelAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).CreateModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CreateModelAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.CreateModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.CreateModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CreateModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).CreateModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).CreateModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: EditModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.EditModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.EditModel(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).EditModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).EditModel(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.EditModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).EditModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).EditModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: EditModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.EditModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.EditModelAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).EditModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).EditModelAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.EditModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.EditModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: EditModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).EditModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).EditModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetSingleModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetSingleModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetSingleModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetSingleModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetSingleModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetSingleModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetSingleModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetSingleModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetSingleModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetSingleModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetSingleModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
  isExternal: true
  name: InitContext()
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.InitContext()
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.InitContext()
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).InitContext()
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).InitContext()
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
    name: InitContext
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.InitContext
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.InitContext
    name: InitContext
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).InitContext
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelList(TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelList(TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelList(TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelList(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelList(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelList(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelList(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelList(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelList(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelList
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelList
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelList
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListAsync(TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListAsync(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListAsync(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListBy(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListBy
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListBy
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetModelListByAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetModelListByAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Data.OData.Query.OrderByDirection
    name: OrderByDirection
    nameWithType: OrderByDirection
    fullName: Microsoft.Data.OData.Query.OrderByDirection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
  isExternal: true
  name: LogErrorMessage(Exception)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.LogErrorMessage(Exception)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.LogErrorMessage(System.Exception)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).LogErrorMessage(Exception)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).LogErrorMessage(System.Exception)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.LogErrorMessage
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.LogErrorMessage(System.Exception)
    name: LogErrorMessage
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).LogErrorMessage
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).LogErrorMessage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveListModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveListModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveListModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).RemoveListModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveListModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveListModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveListModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveListModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveListModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).RemoveListModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveListModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModel(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).RemoveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveModel(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).SaveModel(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveModel(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModel(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).SaveModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveModelAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).SaveModelAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveModelAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveModelAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).SaveModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModel(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveSubModel(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveSubModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).SaveSubModel(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveSubModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModel
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveSubModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveSubModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModel
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).SaveSubModel
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveSubModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.SaveSubModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelAsync
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).SaveSubModelAsync
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).SaveSubModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
  commentId: M:Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
  isExternal: true
  name: GetLambda(String)
  nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetLambda(String)
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetLambda(System.String)
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel).GetLambda(String)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetLambda(System.String)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
    name: GetLambda
    nameWithType: ModelRepositoryBase<TDbContext, TModel>.GetLambda
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>.GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2.GetLambda(System.String)
    name: GetLambda
    nameWithType: ModelRepositoryBase(Of TDbContext, TModel).GetLambda
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel).GetLambda
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.DefaultRepository`2.Instance*
  commentId: Overload:Swastika.Domain.Data.Repository.DefaultRepository`2.Instance
  isExternal: true
  name: Instance
  nameWithType: DefaultRepository<TContext, TModel>.Instance
  fullName: Swastika.Domain.Data.Repository.DefaultRepository<TContext, TModel>.Instance
  nameWithType.vb: DefaultRepository(Of TContext, TModel).Instance
  fullName.vb: Swastika.Domain.Data.Repository.DefaultRepository(Of TContext, TModel).Instance
- uid: Swastika.Domain.Data.Repository.DefaultRepository`2
  commentId: T:Swastika.Domain.Data.Repository.DefaultRepository`2
  parent: Swastika.Domain.Data.Repository
  isExternal: true
  name: DefaultRepository<TContext, TModel>
  nameWithType: DefaultRepository<TContext, TModel>
  fullName: Swastika.Domain.Data.Repository.DefaultRepository<TContext, TModel>
  nameWithType.vb: DefaultRepository(Of TContext, TModel)
  fullName.vb: Swastika.Domain.Data.Repository.DefaultRepository(Of TContext, TModel)
  name.vb: DefaultRepository(Of TContext, TModel)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.DefaultRepository`2
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Swastika.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.DefaultRepository`2
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Swastika.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
