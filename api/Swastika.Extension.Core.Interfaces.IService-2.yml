### YamlMime:ManagedReference
items:
- uid: Swastika.Extension.Core.Interfaces.IService`2
  commentId: T:Swastika.Extension.Core.Interfaces.IService`2
  id: IService`2
  parent: Swastika.Extension.Core.Interfaces
  children:
  - Swastika.Extension.Core.Interfaces.IService`2.GetAll
  - Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.Guid)
  - Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.Int32)
  - Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.String)
  - Swastika.Extension.Core.Interfaces.IService`2.GetById(System.Guid)
  - Swastika.Extension.Core.Interfaces.IService`2.Register(`1)
  - Swastika.Extension.Core.Interfaces.IService`2.Remove(System.Guid)
  - Swastika.Extension.Core.Interfaces.IService`2.Update(`1)
  langs:
  - csharp
  - vb
  name: IService<T, TView>
  nameWithType: IService<T, TView>
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>
  type: Interface
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: >-
      public interface IService<T, TView>
          where T : class where TView : class
    typeParameters:
    - id: T
    - id: TView
    content.vb: Public Interface IService(Of T As Class, TView As Class)
  nameWithType.vb: IService(Of T, TView)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView)
  name.vb: IService(Of T, TView)
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetAll
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.GetAll
  id: GetAll
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: IService<T, TView>.GetAll()
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetAll()
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: IEnumerable<TView> GetAll()
    return:
      type: System.Collections.Generic.IEnumerable{{TView}}
    content.vb: Function GetAll As IEnumerable(Of TView)
  overload: Swastika.Extension.Core.Interfaces.IService`2.GetAll*
  nameWithType.vb: IService(Of T, TView).GetAll()
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetAll()
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.Guid)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.Guid)
  id: GetAllHistory(System.Guid)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: GetAllHistory(Guid)
  nameWithType: IService<T, TView>.GetAllHistory(Guid)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetAllHistory(System.Guid)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: IList<HistoryData<T>> GetAllHistory(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Collections.Generic.IList{Swastika.Domain.Core.Models.HistoryData{{T}}}
    content.vb: Function GetAllHistory(id As Guid) As IList(Of HistoryData(Of T))
  overload: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory*
  nameWithType.vb: IService(Of T, TView).GetAllHistory(Guid)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetAllHistory(System.Guid)
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.Int32)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.Int32)
  id: GetAllHistory(System.Int32)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: GetAllHistory(Int32)
  nameWithType: IService<T, TView>.GetAllHistory(Int32)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetAllHistory(System.Int32)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: IList<HistoryData<T>> GetAllHistory(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Collections.Generic.IList{Swastika.Domain.Core.Models.HistoryData{{T}}}
    content.vb: Function GetAllHistory(id As Integer) As IList(Of HistoryData(Of T))
  overload: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory*
  nameWithType.vb: IService(Of T, TView).GetAllHistory(Int32)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetAllHistory(System.Int32)
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.String)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory(System.String)
  id: GetAllHistory(System.String)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: GetAllHistory(String)
  nameWithType: IService<T, TView>.GetAllHistory(String)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetAllHistory(System.String)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: IList<HistoryData<T>> GetAllHistory(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Collections.Generic.IList{Swastika.Domain.Core.Models.HistoryData{{T}}}
    content.vb: Function GetAllHistory(id As String) As IList(Of HistoryData(Of T))
  overload: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory*
  nameWithType.vb: IService(Of T, TView).GetAllHistory(String)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetAllHistory(System.String)
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetById(System.Guid)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.GetById(System.Guid)
  id: GetById(System.Guid)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: GetById(Guid)
  nameWithType: IService<T, TView>.GetById(Guid)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetById(System.Guid)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: TView GetById(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: '{TView}'
    content.vb: Function GetById(id As Guid) As TView
  overload: Swastika.Extension.Core.Interfaces.IService`2.GetById*
  nameWithType.vb: IService(Of T, TView).GetById(Guid)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetById(System.Guid)
- uid: Swastika.Extension.Core.Interfaces.IService`2.Register(`1)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.Register(`1)
  id: Register(`1)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: Register(TView)
  nameWithType: IService<T, TView>.Register(TView)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.Register(TView)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: void Register(TView TView)
    parameters:
    - id: TView
      type: '{TView}'
    content.vb: Sub Register(TView As TView)
  overload: Swastika.Extension.Core.Interfaces.IService`2.Register*
  nameWithType.vb: IService(Of T, TView).Register(TView)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).Register(TView)
- uid: Swastika.Extension.Core.Interfaces.IService`2.Remove(System.Guid)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.Remove(System.Guid)
  id: Remove(System.Guid)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: Remove(Guid)
  nameWithType: IService<T, TView>.Remove(Guid)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.Remove(System.Guid)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: void Remove(Guid id)
    parameters:
    - id: id
      type: System.Guid
    content.vb: Sub Remove(id As Guid)
  overload: Swastika.Extension.Core.Interfaces.IService`2.Remove*
  nameWithType.vb: IService(Of T, TView).Remove(Guid)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).Remove(System.Guid)
- uid: Swastika.Extension.Core.Interfaces.IService`2.Update(`1)
  commentId: M:Swastika.Extension.Core.Interfaces.IService`2.Update(`1)
  id: Update(`1)
  parent: Swastika.Extension.Core.Interfaces.IService`2
  langs:
  - csharp
  - vb
  name: Update(TView)
  nameWithType: IService<T, TView>.Update(TView)
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.Update(TView)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Extension.Core.Interfaces
  syntax:
    content: void Update(TView TView)
    parameters:
    - id: TView
      type: '{TView}'
    content.vb: Sub Update(TView As TView)
  overload: Swastika.Extension.Core.Interfaces.IService`2.Update*
  nameWithType.vb: IService(Of T, TView).Update(TView)
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).Update(TView)
references:
- uid: Swastika.Extension.Core.Interfaces
  commentId: N:Swastika.Extension.Core.Interfaces
  isExternal: true
  name: Swastika.Extension.Core.Interfaces
  nameWithType: Swastika.Extension.Core.Interfaces
  fullName: Swastika.Extension.Core.Interfaces
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetAll*
  commentId: Overload:Swastika.Extension.Core.Interfaces.IService`2.GetAll
  isExternal: true
  name: GetAll
  nameWithType: IService<T, TView>.GetAll
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetAll
  nameWithType.vb: IService(Of T, TView).GetAll
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetAll
- uid: System.Collections.Generic.IEnumerable{{TView}}
  commentId: '!:System.Collections.Generic.IEnumerable{`1}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TView>
  nameWithType: IEnumerable<TView>
  fullName: System.Collections.Generic.IEnumerable<TView>
  nameWithType.vb: IEnumerable(Of TView)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TView)
  name.vb: IEnumerable(Of TView)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory*
  commentId: Overload:Swastika.Extension.Core.Interfaces.IService`2.GetAllHistory
  isExternal: true
  name: GetAllHistory
  nameWithType: IService<T, TView>.GetAllHistory
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetAllHistory
  nameWithType.vb: IService(Of T, TView).GetAllHistory
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetAllHistory
- uid: System.Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IList{Swastika.Domain.Core.Models.HistoryData{{T}}}
  commentId: '!:System.Collections.Generic.IList{Swastika.Domain.Core.Models.HistoryData{`0}}'
  definition: System.Collections.Generic.IList`1
  name: IList<HistoryData<T>>
  nameWithType: IList<HistoryData<T>>
  fullName: System.Collections.Generic.IList<Swastika.Domain.Core.Models.HistoryData<T>>
  nameWithType.vb: IList(Of HistoryData(Of T))
  fullName.vb: System.Collections.Generic.IList(Of Swastika.Domain.Core.Models.HistoryData(Of T))
  name.vb: IList(Of HistoryData(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.Models.HistoryData`1
    name: HistoryData
    nameWithType: HistoryData
    fullName: Swastika.Domain.Core.Models.HistoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.Models.HistoryData`1
    name: HistoryData
    nameWithType: HistoryData
    fullName: Swastika.Domain.Core.Models.HistoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Swastika.Extension.Core.Interfaces.IService`2.GetById*
  commentId: Overload:Swastika.Extension.Core.Interfaces.IService`2.GetById
  isExternal: true
  name: GetById
  nameWithType: IService<T, TView>.GetById
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.GetById
  nameWithType.vb: IService(Of T, TView).GetById
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).GetById
- uid: '{TView}'
  commentId: '!:TView'
  definition: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: Swastika.Extension.Core.Interfaces.IService`2.Register*
  commentId: Overload:Swastika.Extension.Core.Interfaces.IService`2.Register
  isExternal: true
  name: Register
  nameWithType: IService<T, TView>.Register
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.Register
  nameWithType.vb: IService(Of T, TView).Register
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).Register
- uid: Swastika.Extension.Core.Interfaces.IService`2.Remove*
  commentId: Overload:Swastika.Extension.Core.Interfaces.IService`2.Remove
  isExternal: true
  name: Remove
  nameWithType: IService<T, TView>.Remove
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.Remove
  nameWithType.vb: IService(Of T, TView).Remove
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).Remove
- uid: Swastika.Extension.Core.Interfaces.IService`2.Update*
  commentId: Overload:Swastika.Extension.Core.Interfaces.IService`2.Update
  isExternal: true
  name: Update
  nameWithType: IService<T, TView>.Update
  fullName: Swastika.Extension.Core.Interfaces.IService<T, TView>.Update
  nameWithType.vb: IService(Of T, TView).Update
  fullName.vb: Swastika.Extension.Core.Interfaces.IService(Of T, TView).Update
