### YamlMime:ManagedReference
items:
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
  commentId: T:Mix.Domain.Data.ViewModels.ViewModelBase`3
  id: ViewModelBase`3
  parent: Mix.Domain.Data.ViewModels
  children:
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  - Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  langs:
  - csharp
  - vb
  name: ViewModelBase<TDbContext, TModel, TView>
  nameWithType: ViewModelBase<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>
  type: Class
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: 'public abstract class ViewModelBase<TDbContext, TModel, TView> : Object, IViewModel where TDbContext : DbContext where TModel : class where TView : ViewModelBase<TDbContext, TModel, TView>'
    typeParameters:
    - id: TDbContext
    - id: TModel
    - id: TView
    content.vb: >-
      Public MustInherit Class ViewModelBase(Of TDbContext As DbContext, TModel As Class, TView As ViewModelBase(Of TDbContext, TModel, TView))
          Inherits Object
          Implements IViewModel
  inheritance:
  - System.Object
  derivedClasses:
  - Mix.Cms.Lib.ViewModels.Account.MixRegisterViewModel
  - Mix.Cms.Lib.ViewModels.Account.MixRoles.ReadViewModel
  - Mix.Cms.Lib.ViewModels.Account.MixRoles.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.Account.NavUserRoleViewModel
  - Mix.Cms.Lib.ViewModels.Account.RefreshTokenViewModel
  - Mix.Cms.Lib.ViewModels.Account.RoleViewModel
  - Mix.Cms.Lib.ViewModels.Account.UserInfoViewModel
  - Mix.Cms.Lib.ViewModels.Account.UserRoleViewModel
  - Mix.Cms.Lib.ViewModels.MixArticleArticles.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixArticleMedias.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixArticles.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixArticles.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixArticles.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixArticles.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixComments.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixConfigurations.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixConfigurations.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixCultures.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixCultures.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixCustomers.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixCustomers.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixLanguages.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixLanguages.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixMedias.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixModuleArticles.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixModuleDatas.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixModuleProducts.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixModules.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixModules.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixOrderItems.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixOrderItems.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixOrderItems.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixOrderItems.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixOrders.ApiOrderViewModel
  - Mix.Cms.Lib.ViewModels.MixOrders.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixOrders.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixOrders.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixPageArticles.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPageModules.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixPagePages.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPagePositions.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPageProducts.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPages.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixPages.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixPages.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPages.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixPortalPagePortalPages.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPortalPagePositions.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPortalPageRoles.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPortalPages.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixPortalPages.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixPositions.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixProductMedias.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixProductProducts.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixProducts.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixProducts.ReadMvcViewModel
  - Mix.Cms.Lib.ViewModels.MixProducts.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixRolePortalPages.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixSystem.SystemConfigurationViewModel
  - Mix.Cms.Lib.ViewModels.MixSystem.SystemCultureViewModel
  - Mix.Cms.Lib.ViewModels.MixSystem.SystemLanguageViewModel
  - Mix.Cms.Lib.ViewModels.MixTemplates.InitViewModel
  - Mix.Cms.Lib.ViewModels.MixTemplates.ReadListItemViewModel
  - Mix.Cms.Lib.ViewModels.MixTemplates.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
  - Mix.Cms.Lib.ViewModels.MixThemes.ReadViewModel
  - Mix.Cms.Lib.ViewModels.MixThemes.UpdateViewModel
  implements:
  - Mix.Domain.Data.ViewModels.IViewModel
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView)
  name.vb: ViewModelBase(Of TDbContext, TModel, TView)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  id: Repository
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Repository
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Repository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Repository
  type: Field
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public static readonly DefaultRepository<TDbContext, TModel, TView> Repository
    return:
      type: Mix.Domain.Data.Repository.DefaultRepository{{TDbContext},{TModel},{TView}}
    content.vb: Public Shared ReadOnly Repository As DefaultRepository(Of TDbContext, TModel, TView)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Repository
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Repository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  id: InitModel
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: InitModel()
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitModel()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitModel()
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual TModel InitModel()
    return:
      type: '{TModel}'
    content.vb: Public Overridable Function InitModel As TModel
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitModel()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitModel()
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ParseModel(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseModel(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseModel(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual TModel ParseModel(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: '{TModel}'
    content.vb: Public Overridable Function ParseModel(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As TModel
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseModel(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseModel(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Validate(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Validate(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Validate(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual void Validate(TDbContext _context, IDbContextTransaction _transaction)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Overridable Sub Validate(_context As TDbContext, _transaction As IDbContextTransaction)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Validate(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Validate(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ExpandViewAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ExpandViewAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<bool> ExpandViewAsync(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Overridable Function ExpandViewAsync(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of Boolean)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitViewAsync(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: InitViewAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitViewAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitViewAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public static Task<TView> InitViewAsync(TModel model = null, bool isLazyLoad = true, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: isLazyLoad
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Public Shared Function InitViewAsync(model As TModel = Nothing, isLazyLoad As Boolean = True, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of TView)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync(TModel, Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParseViewAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ParseViewAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<TView> ParseViewAsync(bool isExpand = true, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isExpand
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Public Overridable Function ParseViewAsync(isExpand As Boolean = True, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of TView)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync(Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: CloneAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneAsync(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<RepositoryResponse<List<TView>>> CloneAsync(TModel model, List<SupportedCulture> cloneCultures, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: cloneCultures
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}}
    content.vb: Public Overridable Function CloneAsync(model As TModel, cloneCultures As List(Of SupportedCulture), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of TView)))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneAsync(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CloneSubModelsAsync(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: CloneSubModelsAsync(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync(TView, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<RepositoryResponse<bool>> CloneSubModelsAsync(TView parent, List<SupportedCulture> cloneCultures, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: parent
      type: '{TView}'
    - id: cloneCultures
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overridable Function CloneSubModelsAsync(parent As TView, cloneCultures As List(Of SupportedCulture), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync(TView, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModelsAsync(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<RepositoryResponse<TModel>> RemoveModelAsync(bool isRemoveRelatedModels = false, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isRemoveRelatedModels
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{{TModel}}}
    content.vb: Public Overridable Function RemoveModelAsync(isRemoveRelatedModels As Boolean = False, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of TModel))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<RepositoryResponse<bool>> RemoveRelatedModelsAsync(TView view, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overridable Function RemoveRelatedModelsAsync(view As TView, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<RepositoryResponse<TView>> SaveModelAsync(bool isSaveSubModels = false, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isSaveSubModels
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
    content.vb: Public Overridable Function SaveModelAsync(isSaveSubModels As Boolean = False, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of TView))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual Task<RepositoryResponse<bool>> SaveSubModelsAsync(TModel parent, TDbContext _context, IDbContextTransaction _transaction)
    parameters:
    - id: parent
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overridable Function SaveSubModelsAsync(parent As TModel, _context As TDbContext, _transaction As IDbContextTransaction) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitView(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual TView InitView(TModel model = null, bool isLazyLoad = true, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: isLazyLoad
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: '{TView}'
    content.vb: Public Overridable Function InitView(model As TModel = Nothing, isLazyLoad As Boolean = True, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As TView
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitView(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ParseView(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseView(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseView(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual TView ParseView(bool isExpand = true, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isExpand
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: '{TView}'
    content.vb: Public Overridable Function ParseView(isExpand As Boolean = True, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As TView
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseView(Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseView(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ExpandView(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandView(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandView(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual void ExpandView(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Overridable Sub ExpandView(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandView(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandView(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Clone(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Clone(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Clone(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual RepositoryResponse<List<TView>> Clone(TModel model, List<SupportedCulture> cloneCultures, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: cloneCultures
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}
    content.vb: Public Overridable Function Clone(model As TModel, cloneCultures As List(Of SupportedCulture), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of TView))
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Clone(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Clone(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Clone(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CloneSubModels(`2,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: CloneSubModels(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModels(TView, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModels(TView, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual RepositoryResponse<bool> CloneSubModels(TView parent, List<SupportedCulture> cloneCultures, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: parent
      type: '{TView}'
    - id: cloneCultures
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Overridable Function CloneSubModels(parent As TView, cloneCultures As List(Of SupportedCulture), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels(TView, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModels(TView, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual RepositoryResponse<TModel> RemoveModel(bool isRemoveRelatedModels = false, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isRemoveRelatedModels
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{{TModel}}
    content.vb: Public Overridable Function RemoveModel(isRemoveRelatedModels As Boolean = False, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of TModel)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual RepositoryResponse<bool> RemoveRelatedModels(TView view, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Overridable Function RemoveRelatedModels(view As TView, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: SaveModel(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual RepositoryResponse<TView> SaveModel(bool isSaveSubModels = false, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isSaveSubModels
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{{TView}}
    content.vb: Public Overridable Function SaveModel(isSaveSubModels As Boolean = False, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of TView)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModel(Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModels(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public virtual RepositoryResponse<bool> SaveSubModels(TModel parent, TDbContext _context, IDbContextTransaction _transaction)
    parameters:
    - id: parent
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Overridable Function SaveSubModels(parent As TModel, _context As TDbContext, _transaction As IDbContextTransaction) As RepositoryResponse(Of Boolean)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: '#ctor(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)'
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ViewModelBase(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ViewModelBase(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ViewModelBase(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Constructor
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: protected ViewModelBase(TModel model, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Protected Sub New(model As TModel, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: '#ctor(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)'
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ViewModelBase(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ViewModelBase(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ViewModelBase(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Constructor
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: protected ViewModelBase(TModel model, bool isLazyLoad, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: isLazyLoad
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Protected Sub New(model As TModel, isLazyLoad As Boolean, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase(TModel, Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor
  id: '#ctor'
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ViewModelBase()
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ViewModelBase()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ViewModelBase()
  type: Constructor
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: protected ViewModelBase()
    content.vb: Protected Sub New
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase()
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  id: Exception
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Exception
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Exception
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public Exception Exception { get; set; }
    parameters: []
    return:
      type: System.Exception
    content.vb: Public Property Exception As Exception
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Exception
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Exception
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  id: IsClone
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: IsClone
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsClone
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsClone
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public bool IsClone { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsClone As Boolean
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsClone
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsClone
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  id: IsLazyLoad
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: IsLazyLoad
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsLazyLoad
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsLazyLoad
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public bool IsLazyLoad { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsLazyLoad As Boolean
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsLazyLoad
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsLazyLoad
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  id: Cultures
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Cultures
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Cultures
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Cultures
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public List<SupportedCulture> Cultures { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    content.vb: Public Property Cultures As List(Of SupportedCulture)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Cultures
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Cultures
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  id: Mapper
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Mapper
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Mapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Mapper
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public IMapper Mapper { get; set; }
    parameters: []
    return:
      type: AutoMapper.IMapper
    content.vb: Public Property Mapper As IMapper
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Mapper
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Mapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  id: Model
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Model
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Model
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public TModel Model { get; set; }
    parameters: []
    return:
      type: '{TModel}'
    content.vb: Public Property Model As TModel
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Model
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Model
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  id: ModelMapper
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: ModelMapper
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ModelMapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ModelMapper
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public IMapper ModelMapper { get; set; }
    parameters: []
    return:
      type: AutoMapper.IMapper
    content.vb: Public Property ModelMapper As IMapper
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ModelMapper
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ModelMapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  id: Priority
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Priority
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Priority
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public int Priority { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Priority As Integer
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Priority
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Priority
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  id: Specificulture
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Specificulture
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Specificulture
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Specificulture
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public string Specificulture { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Specificulture As String
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Specificulture
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Specificulture
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  id: Errors
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Errors
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Errors
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public List<string> Errors { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Property Errors As List(Of String)
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Errors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Errors
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  id: IsValid
  parent: Mix.Domain.Data.ViewModels.ViewModelBase`3
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsValid
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsValid
  type: Property
  source:
    path: Mix.Heart
    isExternal: true
  assemblies:
  - Mix.Heart
  namespace: Mix.Domain.Data.ViewModels
  syntax:
    content: public bool IsValid { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsValid As Boolean
  overload: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid*
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsValid
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsValid
references:
- uid: Mix.Domain.Data.ViewModels
  commentId: N:Mix.Domain.Data.ViewModels
  isExternal: true
  name: Mix.Domain.Data.ViewModels
  nameWithType: Mix.Domain.Data.ViewModels
  fullName: Mix.Domain.Data.ViewModels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Domain.Data.ViewModels.IViewModel
  commentId: T:Mix.Domain.Data.ViewModels.IViewModel
  parent: Mix.Domain.Data.ViewModels
  isExternal: true
  name: IViewModel
  nameWithType: IViewModel
  fullName: Mix.Domain.Data.ViewModels.IViewModel
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Domain.Data.Repository.DefaultRepository{{TDbContext},{TModel},{TView}}
  commentId: T:Mix.Domain.Data.Repository.DefaultRepository{`0,`1,`2}
  parent: Mix.Domain.Data.Repository
  definition: Mix.Domain.Data.Repository.DefaultRepository`3
  name: DefaultRepository<TDbContext, TModel, TView>
  nameWithType: DefaultRepository<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView)
  name.vb: DefaultRepository(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Mix.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Mix.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository.DefaultRepository`3
  commentId: T:Mix.Domain.Data.Repository.DefaultRepository`3
  parent: Mix.Domain.Data.Repository
  isExternal: true
  name: DefaultRepository<TDbContext, TModel, TView>
  nameWithType: DefaultRepository<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView)
  name.vb: DefaultRepository(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Mix.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Mix.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.Repository
  commentId: N:Mix.Domain.Data.Repository
  isExternal: true
  name: Mix.Domain.Data.Repository
  nameWithType: Mix.Domain.Data.Repository
  fullName: Mix.Domain.Data.Repository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  isExternal: true
  name: InitModel
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitModel
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitModel
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitModel
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitModel
- uid: '{TModel}'
  commentId: '!:TModel'
  definition: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel
  isExternal: true
  name: ParseModel
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseModel
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseModel
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseModel
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseModel
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate
  isExternal: true
  name: Validate
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Validate
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Validate
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Validate
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Validate
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandViewAsync
  isExternal: true
  name: ExpandViewAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandViewAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandViewAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitViewAsync
  isExternal: true
  name: InitViewAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitViewAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitViewAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitViewAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{{TView}}
  commentId: '!:System.Threading.Tasks.Task{`2}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TView>
  nameWithType: Task<TView>
  fullName: System.Threading.Tasks.Task<TView>
  nameWithType.vb: Task(Of TView)
  fullName.vb: System.Threading.Tasks.Task(Of TView)
  name.vb: Task(Of TView)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseViewAsync
  isExternal: true
  name: ParseViewAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseViewAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseViewAsync
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync
  isExternal: true
  name: CloneAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneAsync
- uid: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
  commentId: '!:System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}'
  definition: System.Collections.Generic.List`1
  name: List<SupportedCulture>
  nameWithType: List<SupportedCulture>
  fullName: System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>
  nameWithType.vb: List(Of SupportedCulture)
  fullName.vb: System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture)
  name.vb: List(Of SupportedCulture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{`2}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<TView>>>
  nameWithType: Task<RepositoryResponse<List<TView>>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<TView>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of TView)))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of TView)))
  name.vb: Task(Of RepositoryResponse(Of List(Of TView)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync
  isExternal: true
  name: CloneSubModelsAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync
- uid: '{TView}'
  commentId: '!:TView'
  definition: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<Boolean>>
  nameWithType: Task<RepositoryResponse<Boolean>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>>
  nameWithType.vb: Task(Of RepositoryResponse(Of Boolean))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean))
  name.vb: Task(Of RepositoryResponse(Of Boolean))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync
  isExternal: true
  name: RemoveModelAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{{TModel}}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{`1}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<TModel>>
  nameWithType: Task<RepositoryResponse<TModel>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<TModel>>
  nameWithType.vb: Task(Of RepositoryResponse(Of TModel))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of TModel))
  name.vb: Task(Of RepositoryResponse(Of TModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync
  isExternal: true
  name: RemoveRelatedModelsAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync
  isExternal: true
  name: SaveModelAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
  commentId: '!:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{``0}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<TView>>
  nameWithType: Task<RepositoryResponse<TView>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<TView>>
  nameWithType.vb: Task(Of RepositoryResponse(Of TView))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of TView))
  name.vb: Task(Of RepositoryResponse(Of TView))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync
  isExternal: true
  name: SaveSubModelsAsync
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView
  isExternal: true
  name: InitView
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitView
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitView
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitView
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitView
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView
  isExternal: true
  name: ParseView
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseView
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseView
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseView
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseView
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView
  isExternal: true
  name: ExpandView
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandView
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandView
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandView
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandView
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone
  isExternal: true
  name: Clone
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Clone
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Clone
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Clone
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Clone
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{`2}}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<TView>>
  nameWithType: RepositoryResponse<List<TView>>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<TView>>
  nameWithType.vb: RepositoryResponse(Of List(Of TView))
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of TView))
  name.vb: RepositoryResponse(Of List(Of TView))
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse`1
  isExternal: true
  name: RepositoryResponse<TResult>
  nameWithType: RepositoryResponse<TResult>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<TResult>
  nameWithType.vb: RepositoryResponse(Of TResult)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of TResult)
  name.vb: RepositoryResponse(Of TResult)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels
  commentId: N:Mix.Domain.Core.ViewModels
  isExternal: true
  name: Mix.Domain.Core.ViewModels
  nameWithType: Mix.Domain.Core.ViewModels
  fullName: Mix.Domain.Core.ViewModels
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels
  isExternal: true
  name: CloneSubModels
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModels
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModels
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<Boolean>
  nameWithType: RepositoryResponse<Boolean>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>
  nameWithType.vb: RepositoryResponse(Of Boolean)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean)
  name.vb: RepositoryResponse(Of Boolean)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel
  isExternal: true
  name: RemoveModel
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModel
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModel
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModel
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModel
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse{{TModel}}
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse{`1}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<TModel>
  nameWithType: RepositoryResponse<TModel>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<TModel>
  nameWithType.vb: RepositoryResponse(Of TModel)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of TModel)
  name.vb: RepositoryResponse(Of TModel)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels
  isExternal: true
  name: RemoveRelatedModels
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel
  isExternal: true
  name: SaveModel
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModel
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModel
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModel
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModel
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse{{TView}}
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse{`2}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<TView>
  nameWithType: RepositoryResponse<TView>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<TView>
  nameWithType.vb: RepositoryResponse(Of TView)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of TView)
  name.vb: RepositoryResponse(Of TView)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels
  isExternal: true
  name: SaveSubModels
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModels
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModels
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.#ctor
  isExternal: true
  name: ViewModelBase
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ViewModelBase
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ViewModelBase
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ViewModelBase
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Exception
  isExternal: true
  name: Exception
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Exception
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Exception
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Exception
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Exception
- uid: System.Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsClone
  isExternal: true
  name: IsClone
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsClone
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsClone
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsClone
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsClone
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsLazyLoad
  isExternal: true
  name: IsLazyLoad
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsLazyLoad
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsLazyLoad
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsLazyLoad
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsLazyLoad
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Cultures
  isExternal: true
  name: Cultures
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Cultures
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Cultures
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Cultures
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Cultures
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Mapper
  isExternal: true
  name: Mapper
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Mapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Mapper
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Mapper
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Mapper
- uid: AutoMapper.IMapper
  isExternal: true
  name: IMapper
  nameWithType: IMapper
  fullName: AutoMapper.IMapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  isExternal: true
  name: Model
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Model
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Model
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Model
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Model
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelMapper
  isExternal: true
  name: ModelMapper
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ModelMapper
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ModelMapper
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ModelMapper
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ModelMapper
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Priority
  isExternal: true
  name: Priority
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Priority
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Priority
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Priority
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Specificulture
  isExternal: true
  name: Specificulture
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Specificulture
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Specificulture
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Specificulture
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Specificulture
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  isExternal: true
  name: Errors
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Errors
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Errors
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Errors
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Errors
- uid: System.Collections.Generic.List{System.String}
  commentId: '!:System.Collections.Generic.List{System.String}'
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid*
  commentId: Overload:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  isExternal: true
  name: IsValid
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsValid
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsValid
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsValid
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsValid
