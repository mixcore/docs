### YamlMime:ManagedReference
items:
- uid: Swastika.Cms.Api.Controllers.ApiAccountController
  commentId: T:Swastika.Cms.Api.Controllers.ApiAccountController
  id: ApiAccountController
  parent: Swastika.Cms.Api.Controllers
  children:
  - Swastika.Cms.Api.Controllers.ApiAccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController})
  - Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim(System.String,System.String)
  - Swastika.Cms.Api.Controllers.ApiAccountController.Details(System.String,System.String)
  - Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage
  - Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync(Swastika.Identity.Models.ApplicationUser)
  - Swastika.Cms.Api.Controllers.ApiAccountController.GetList(Swastika.Domain.Core.ViewModels.RequestPaging)
  - Swastika.Cms.Api.Controllers.ApiAccountController.Login(Swastika.Identity.Models.AccountViewModels.LoginViewModel)
  - Swastika.Cms.Api.Controllers.ApiAccountController.Logout
  - Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole(Swastika.Identity.Models.AccountViewModels.UserRoleModel)
  - Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken(System.String)
  - Swastika.Cms.Api.Controllers.ApiAccountController.Register(Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel)
  - Swastika.Cms.Api.Controllers.ApiAccountController.Save(Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel)
  langs:
  - csharp
  - vb
  name: ApiAccountController
  nameWithType: ApiAccountController
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController
  type: Class
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: 'public class ApiAccountController : BaseApiController'
    content.vb: >-
      Public Class ApiAccountController
          Inherits BaseApiController
  inheritance:
  - System.Object
  - Swastka.Cms.Api.Controllers.BaseApiController
  inheritedMembers:
  - Swastka.Cms.Api.Controllers.BaseApiController._domain
  - Swastka.Cms.Api.Controllers.BaseApiController._lang
  - Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  - Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(System.Object)
  - Swastka.Cms.Api.Controllers.BaseApiController.NotFound(System.Object)
  - Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  - Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult(System.String,System.String)
  - Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
  - Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1({TResult})
  - Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate(Swastika.Domain.Core.ViewModels.RequestPaging)
  - Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)
  - Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController})
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController})
  id: '#ctor(Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController})'
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: ApiAccountController(UserManager<ApplicationUser>, SignInManager<ApplicationUser>, RoleManager<IdentityRole>, ILogger<ApiAccountController>)
  nameWithType: ApiAccountController.ApiAccountController(UserManager<ApplicationUser>, SignInManager<ApplicationUser>, RoleManager<IdentityRole>, ILogger<ApiAccountController>)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.ApiAccountController(Microsoft.AspNetCore.Identity.UserManager<Swastika.Identity.Models.ApplicationUser>, Microsoft.AspNetCore.Identity.SignInManager<Swastika.Identity.Models.ApplicationUser>, Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.IdentityRole>, Microsoft.Extensions.Logging.ILogger<Swastika.Cms.Api.Controllers.ApiAccountController>)
  type: Constructor
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public ApiAccountController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, RoleManager<IdentityRole> roleManager, ILogger<ApiAccountController> logger)
    parameters:
    - id: userManager
      type: Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser}
    - id: signInManager
      type: Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser}
    - id: roleManager
      type: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController}
    content.vb: Public Sub New(userManager As UserManager(Of ApplicationUser), signInManager As SignInManager(Of ApplicationUser), roleManager As RoleManager(Of IdentityRole), logger As ILogger(Of ApiAccountController))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.#ctor*
  nameWithType.vb: ApiAccountController.ApiAccountController(UserManager(Of ApplicationUser), SignInManager(Of ApplicationUser), RoleManager(Of IdentityRole), ILogger(Of ApiAccountController))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Cms.Api.Controllers.ApiAccountController.ApiAccountController(Microsoft.AspNetCore.Identity.UserManager(Of Swastika.Identity.Models.ApplicationUser), Microsoft.AspNetCore.Identity.SignInManager(Of Swastika.Identity.Models.ApplicationUser), Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.IdentityRole), Microsoft.Extensions.Logging.ILogger(Of Swastika.Cms.Api.Controllers.ApiAccountController))
  name.vb: ApiAccountController(UserManager(Of ApplicationUser), SignInManager(Of ApplicationUser), RoleManager(Of IdentityRole), ILogger(Of ApiAccountController))
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Logout
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.Logout
  id: Logout
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: Logout()
  nameWithType: ApiAccountController.Logout()
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Logout()
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<bool>> Logout()
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Function Logout As Task(Of RepositoryResponse(Of Boolean))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.Logout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Login(Swastika.Identity.Models.AccountViewModels.LoginViewModel)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.Login(Swastika.Identity.Models.AccountViewModels.LoginViewModel)
  id: Login(Swastika.Identity.Models.AccountViewModels.LoginViewModel)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: Login(LoginViewModel)
  nameWithType: ApiAccountController.Login(LoginViewModel)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Login(Swastika.Identity.Models.AccountViewModels.LoginViewModel)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<AccessTokenViewModel>> Login(LoginViewModel model)
    parameters:
    - id: model
      type: Swastika.Identity.Models.AccountViewModels.LoginViewModel
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.AccessTokenViewModel}}
    content.vb: Public Function Login(model As LoginViewModel) As Task(Of RepositoryResponse(Of AccessTokenViewModel))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.Login*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken(System.String)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken(System.String)
  id: RefreshToken(System.String)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: RefreshToken(String)
  nameWithType: ApiAccountController.RefreshToken(String)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken(System.String)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<AccessTokenViewModel>> RefreshToken(string refreshTokenId)
    parameters:
    - id: refreshTokenId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.AccessTokenViewModel}}
    content.vb: Public Function RefreshToken(refreshTokenId As String) As Task(Of RepositoryResponse(Of AccessTokenViewModel))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Register(Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.Register(Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel)
  id: Register(Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: Register(BEUserViewModel)
  nameWithType: ApiAccountController.Register(BEUserViewModel)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Register(Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<AccessTokenViewModel>> Register(BEUserViewModel model)
    parameters:
    - id: model
      type: Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.AccessTokenViewModel}}
    content.vb: Public Function Register(model As BEUserViewModel) As Task(Of RepositoryResponse(Of AccessTokenViewModel))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.Register*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole(Swastika.Identity.Models.AccountViewModels.UserRoleModel)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole(Swastika.Identity.Models.AccountViewModels.UserRoleModel)
  id: ManageUserInRole(Swastika.Identity.Models.AccountViewModels.UserRoleModel)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: ManageUserInRole(UserRoleModel)
  nameWithType: ApiAccountController.ManageUserInRole(UserRoleModel)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole(Swastika.Identity.Models.AccountViewModels.UserRoleModel)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<bool>> ManageUserInRole(UserRoleModel model)
    parameters:
    - id: model
      type: Swastika.Identity.Models.AccountViewModels.UserRoleModel
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Function ManageUserInRole(model As UserRoleModel) As Task(Of RepositoryResponse(Of Boolean))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Details(System.String,System.String)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.Details(System.String,System.String)
  id: Details(System.String,System.String)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: Details(String, String)
  nameWithType: ApiAccountController.Details(String, String)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Details(System.String, System.String)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<JObject> Details(string viewType, string id = null)
    parameters:
    - id: viewType
      type: System.String
    - id: id
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}
    content.vb: Public Function Details(viewType As String, id As String = Nothing) As Task(Of JObject)
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.Details*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Save(Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.Save(Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel)
  id: Save(Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: Save(InfoUserViewModel)
  nameWithType: ApiAccountController.Save(InfoUserViewModel)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Save(Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<InfoUserViewModel>> Save(InfoUserViewModel model)
    parameters:
    - id: model
      type: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel}}
    content.vb: Public Function Save(model As InfoUserViewModel) As Task(Of RepositoryResponse(Of InfoUserViewModel))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.GetList(Swastika.Domain.Core.ViewModels.RequestPaging)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.GetList(Swastika.Domain.Core.ViewModels.RequestPaging)
  id: GetList(Swastika.Domain.Core.ViewModels.RequestPaging)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: GetList(RequestPaging)
  nameWithType: ApiAccountController.GetList(RequestPaging)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.GetList(Swastika.Domain.Core.ViewModels.RequestPaging)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public Task<RepositoryResponse<PaginationModel<InfoUserViewModel>>> GetList(RequestPaging request)
    parameters:
    - id: request
      type: Swastika.Domain.Core.ViewModels.RequestPaging
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel}}}
    content.vb: Public Function GetList(request As RequestPaging) As Task(Of RepositoryResponse(Of PaginationModel(Of InfoUserViewModel)))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.GetList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync(Swastika.Identity.Models.ApplicationUser)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync(Swastika.Identity.Models.ApplicationUser)
  id: GetClaimsAsync(Swastika.Identity.Models.ApplicationUser)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(ApplicationUser)
  nameWithType: ApiAccountController.GetClaimsAsync(ApplicationUser)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync(Swastika.Identity.Models.ApplicationUser)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: protected Task<List<Claim>> GetClaimsAsync(ApplicationUser user)
    parameters:
    - id: user
      type: Swastika.Identity.Models.ApplicationUser
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Security.Claims.Claim}}
    content.vb: Protected Function GetClaimsAsync(user As ApplicationUser) As Task(Of List(Of Claim))
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim(System.String,System.String)
  commentId: M:Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim(System.String,System.String)
  id: CreateClaim(System.String,System.String)
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: CreateClaim(String, String)
  nameWithType: ApiAccountController.CreateClaim(String, String)
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim(System.String, System.String)
  type: Method
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: protected Claim CreateClaim(string type, string value)
    parameters:
    - id: type
      type: System.String
    - id: value
      type: System.String
    return:
      type: System.Security.Claims.Claim
    content.vb: Protected Function CreateClaim(type As String, value As String) As Claim
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage
  commentId: P:Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage
  id: ErrorMessage
  parent: Swastika.Cms.Api.Controllers.ApiAccountController
  langs:
  - csharp
  - vb
  name: ErrorMessage
  nameWithType: ApiAccountController.ErrorMessage
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage
  type: Property
  source:
    path: Swastka.Cms.Api
    isExternal: true
  assemblies:
  - Swastka.Cms.Api
  namespace: Swastika.Cms.Api.Controllers
  syntax:
    content: public string ErrorMessage { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ErrorMessage As String
  overload: Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Swastika.Cms.Api.Controllers
  commentId: N:Swastika.Cms.Api.Controllers
  isExternal: true
  name: Swastika.Cms.Api.Controllers
  nameWithType: Swastika.Cms.Api.Controllers
  fullName: Swastika.Cms.Api.Controllers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Swastka.Cms.Api.Controllers.BaseApiController
  commentId: T:Swastka.Cms.Api.Controllers.BaseApiController
  parent: Swastka.Cms.Api.Controllers
  isExternal: true
  name: BaseApiController
  nameWithType: BaseApiController
  fullName: Swastka.Cms.Api.Controllers.BaseApiController
- uid: Swastka.Cms.Api.Controllers.BaseApiController._domain
  commentId: F:Swastka.Cms.Api.Controllers.BaseApiController._domain
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: _domain
  nameWithType: BaseApiController._domain
  fullName: Swastka.Cms.Api.Controllers.BaseApiController._domain
- uid: Swastka.Cms.Api.Controllers.BaseApiController._lang
  commentId: F:Swastka.Cms.Api.Controllers.BaseApiController._lang
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: _lang
  nameWithType: BaseApiController._lang
  fullName: Swastka.Cms.Api.Controllers.BaseApiController._lang
- uid: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: BadRequest(ModelStateDictionary)
  nameWithType: BaseApiController.BadRequest(ModelStateDictionary)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    name: BadRequest
    nameWithType: BaseApiController.BadRequest
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
    name: ModelStateDictionary
    nameWithType: ModelStateDictionary
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    name: BadRequest
    nameWithType: BaseApiController.BadRequest
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
    name: ModelStateDictionary
    nameWithType: ModelStateDictionary
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(System.Object)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(System.Object)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: BadRequest(Object)
  nameWithType: BaseApiController.BadRequest(Object)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(System.Object)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(System.Object)
    name: BadRequest
    nameWithType: BaseApiController.BadRequest
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest(System.Object)
    name: BadRequest
    nameWithType: BaseApiController.BadRequest
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.BadRequest
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.NotFound(System.Object)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.NotFound(System.Object)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: NotFound(Object)
  nameWithType: BaseApiController.NotFound(Object)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.NotFound(System.Object)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.NotFound(System.Object)
    name: NotFound
    nameWithType: BaseApiController.NotFound
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.NotFound
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.NotFound(System.Object)
    name: NotFound
    nameWithType: BaseApiController.NotFound
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.NotFound
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: OnActionExecuting(ActionExecutingContext)
  nameWithType: BaseApiController.OnActionExecuting(ActionExecutingContext)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    name: OnActionExecuting
    nameWithType: BaseApiController.OnActionExecuting
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    name: ActionExecutingContext
    nameWithType: ActionExecutingContext
    fullName: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    name: OnActionExecuting
    nameWithType: BaseApiController.OnActionExecuting
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.OnActionExecuting
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    name: ActionExecutingContext
    nameWithType: ActionExecutingContext
    fullName: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult(System.String,System.String)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult(System.String,System.String)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: GetErrorResult(String, String)
  nameWithType: BaseApiController.GetErrorResult(String, String)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult(System.String, System.String)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult(System.String,System.String)
    name: GetErrorResult
    nameWithType: BaseApiController.GetErrorResult
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult(System.String,System.String)
    name: GetErrorResult
    nameWithType: BaseApiController.GetErrorResult
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetErrorResult
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: GetLanguage()
  nameWithType: BaseApiController.GetLanguage()
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage()
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
    name: GetLanguage
    nameWithType: BaseApiController.GetLanguage
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
    name: GetLanguage
    nameWithType: BaseApiController.GetLanguage
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetLanguage
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1({TResult})
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  definition: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
  name: GetSuccessResult<TResult>(TResult)
  nameWithType: BaseApiController.GetSuccessResult<TResult>(TResult)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult<TResult>(TResult)
  nameWithType.vb: BaseApiController.GetSuccessResult(Of TResult)(TResult)
  fullName.vb: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult(Of TResult)(TResult)
  name.vb: GetSuccessResult(Of TResult)(TResult)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
    name: GetSuccessResult<TResult>
    nameWithType: BaseApiController.GetSuccessResult<TResult>
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
    name: GetSuccessResult(Of TResult)
    nameWithType: BaseApiController.GetSuccessResult(Of TResult)
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate(Swastika.Domain.Core.ViewModels.RequestPaging)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate(Swastika.Domain.Core.ViewModels.RequestPaging)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: ParseRequestPagingDate(RequestPaging)
  nameWithType: BaseApiController.ParseRequestPagingDate(RequestPaging)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate(Swastika.Domain.Core.ViewModels.RequestPaging)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate(Swastika.Domain.Core.ViewModels.RequestPaging)
    name: ParseRequestPagingDate
    nameWithType: BaseApiController.ParseRequestPagingDate
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Swastika.Domain.Core.ViewModels.RequestPaging
    name: RequestPaging
    nameWithType: RequestPaging
    fullName: Swastika.Domain.Core.ViewModels.RequestPaging
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate(Swastika.Domain.Core.ViewModels.RequestPaging)
    name: ParseRequestPagingDate
    nameWithType: BaseApiController.ParseRequestPagingDate
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.ParseRequestPagingDate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Swastika.Domain.Core.ViewModels.RequestPaging
    name: RequestPaging
    nameWithType: RequestPaging
    fullName: Swastika.Domain.Core.ViewModels.RequestPaging
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: UploadFileAsync(IFormFile, String)
  nameWithType: BaseApiController.UploadFileAsync(IFormFile, String)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile, System.String)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)
    name: UploadFileAsync
    nameWithType: BaseApiController.UploadFileAsync
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.IFormFile
    name: IFormFile
    nameWithType: IFormFile
    fullName: Microsoft.AspNetCore.Http.IFormFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)
    name: UploadFileAsync
    nameWithType: BaseApiController.UploadFileAsync
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.UploadFileAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.IFormFile
    name: IFormFile
    nameWithType: IFormFile
    fullName: Microsoft.AspNetCore.Http.IFormFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync(System.String)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync(System.String)
  parent: Swastka.Cms.Api.Controllers.BaseApiController
  isExternal: true
  name: UploadListFileAsync(String)
  nameWithType: BaseApiController.UploadListFileAsync(String)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync(System.String)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync(System.String)
    name: UploadListFileAsync
    nameWithType: BaseApiController.UploadListFileAsync
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync(System.String)
    name: UploadListFileAsync
    nameWithType: BaseApiController.UploadListFileAsync
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.UploadListFileAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Swastka.Cms.Api.Controllers
  commentId: N:Swastka.Cms.Api.Controllers
  isExternal: true
  name: Swastka.Cms.Api.Controllers
  nameWithType: Swastka.Cms.Api.Controllers
  fullName: Swastka.Cms.Api.Controllers
- uid: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
  commentId: M:Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
  isExternal: true
  name: GetSuccessResult<TResult>(TResult)
  nameWithType: BaseApiController.GetSuccessResult<TResult>(TResult)
  fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult<TResult>(TResult)
  nameWithType.vb: BaseApiController.GetSuccessResult(Of TResult)(TResult)
  fullName.vb: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult(Of TResult)(TResult)
  name.vb: GetSuccessResult(Of TResult)(TResult)
  spec.csharp:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
    name: GetSuccessResult<TResult>
    nameWithType: BaseApiController.GetSuccessResult<TResult>
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult``1(``0)
    name: GetSuccessResult(Of TResult)
    nameWithType: BaseApiController.GetSuccessResult(Of TResult)
    fullName: Swastka.Cms.Api.Controllers.BaseApiController.GetSuccessResult(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.#ctor*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.#ctor
  isExternal: true
  name: ApiAccountController
  nameWithType: ApiAccountController.ApiAccountController
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.ApiAccountController
- uid: Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser}
  commentId: '!:Microsoft.AspNetCore.Identity.UserManager{Swastika.Identity.Models.ApplicationUser}'
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<ApplicationUser>
  nameWithType: UserManager<ApplicationUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<Swastika.Identity.Models.ApplicationUser>
  nameWithType.vb: UserManager(Of ApplicationUser)
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of Swastika.Identity.Models.ApplicationUser)
  name.vb: UserManager(Of ApplicationUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Swastika.Identity.Models.ApplicationUser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Swastika.Identity.Models.ApplicationUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser}
  commentId: '!:Microsoft.AspNetCore.Identity.SignInManager{Swastika.Identity.Models.ApplicationUser}'
  definition: Microsoft.AspNetCore.Identity.SignInManager`1
  name: SignInManager<ApplicationUser>
  nameWithType: SignInManager<ApplicationUser>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<Swastika.Identity.Models.ApplicationUser>
  nameWithType.vb: SignInManager(Of ApplicationUser)
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of Swastika.Identity.Models.ApplicationUser)
  name.vb: SignInManager(Of ApplicationUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Swastika.Identity.Models.ApplicationUser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Identity.Models.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: Swastika.Identity.Models.ApplicationUser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}
  commentId: '!:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole}'
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<IdentityRole>
  nameWithType: RoleManager<IdentityRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.IdentityRole>
  nameWithType.vb: RoleManager(Of IdentityRole)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.IdentityRole)
  name.vb: RoleManager(Of IdentityRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityRole
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityRole
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{Swastika.Cms.Api.Controllers.ApiAccountController}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<ApiAccountController>
  nameWithType: ILogger<ApiAccountController>
  fullName: Microsoft.Extensions.Logging.ILogger<Swastika.Cms.Api.Controllers.ApiAccountController>
  nameWithType.vb: ILogger(Of ApiAccountController)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Swastika.Cms.Api.Controllers.ApiAccountController)
  name.vb: ILogger(Of ApiAccountController)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Api.Controllers.ApiAccountController
    name: ApiAccountController
    nameWithType: ApiAccountController
    fullName: Swastika.Cms.Api.Controllers.ApiAccountController
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Api.Controllers.ApiAccountController
    name: ApiAccountController
    nameWithType: ApiAccountController
    fullName: Swastika.Cms.Api.Controllers.ApiAccountController
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: true
  name: UserManager<>
  nameWithType: UserManager<>
  fullName: Microsoft.AspNetCore.Identity.UserManager<>
  nameWithType.vb: UserManager(Of )
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of )
  name.vb: UserManager(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.SignInManager`1
  isExternal: true
  name: SignInManager<>
  nameWithType: SignInManager<>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<>
  nameWithType.vb: SignInManager(Of )
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of )
  name.vb: SignInManager(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: true
  name: RoleManager<>
  nameWithType: RoleManager<>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<>
  nameWithType.vb: RoleManager(Of )
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of )
  name.vb: RoleManager(Of )
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Logout*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.Logout
  isExternal: true
  name: Logout
  nameWithType: ApiAccountController.Logout
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Logout
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<Boolean>>
  nameWithType: Task<RepositoryResponse<Boolean>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>>
  nameWithType.vb: Task(Of RepositoryResponse(Of Boolean))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean))
  name.vb: Task(Of RepositoryResponse(Of Boolean))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Login*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.Login
  isExternal: true
  name: Login
  nameWithType: ApiAccountController.Login
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Login
- uid: Swastika.Identity.Models.AccountViewModels.LoginViewModel
  commentId: T:Swastika.Identity.Models.AccountViewModels.LoginViewModel
  parent: Swastika.Identity.Models.AccountViewModels
  isExternal: true
  name: LoginViewModel
  nameWithType: LoginViewModel
  fullName: Swastika.Identity.Models.AccountViewModels.LoginViewModel
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.AccessTokenViewModel}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.AccessTokenViewModel}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<AccessTokenViewModel>>
  nameWithType: Task<RepositoryResponse<AccessTokenViewModel>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<Swastika.Cms.Lib.ViewModels.AccessTokenViewModel>>
  nameWithType.vb: Task(Of RepositoryResponse(Of AccessTokenViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of Swastika.Cms.Lib.ViewModels.AccessTokenViewModel))
  name.vb: Task(Of RepositoryResponse(Of AccessTokenViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.AccessTokenViewModel
    name: AccessTokenViewModel
    nameWithType: AccessTokenViewModel
    fullName: Swastika.Cms.Lib.ViewModels.AccessTokenViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.AccessTokenViewModel
    name: AccessTokenViewModel
    nameWithType: AccessTokenViewModel
    fullName: Swastika.Cms.Lib.ViewModels.AccessTokenViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Identity.Models.AccountViewModels
  commentId: N:Swastika.Identity.Models.AccountViewModels
  isExternal: true
  name: Swastika.Identity.Models.AccountViewModels
  nameWithType: Swastika.Identity.Models.AccountViewModels
  fullName: Swastika.Identity.Models.AccountViewModels
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken
  isExternal: true
  name: RefreshToken
  nameWithType: ApiAccountController.RefreshToken
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.RefreshToken
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Register*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.Register
  isExternal: true
  name: Register
  nameWithType: ApiAccountController.Register
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Register
- uid: Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel
  commentId: T:Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel
  parent: Swastika.Cms.Lib.ViewModels.Backend
  isExternal: true
  name: BEUserViewModel
  nameWithType: BEUserViewModel
  fullName: Swastika.Cms.Lib.ViewModels.Backend.BEUserViewModel
- uid: Swastika.Cms.Lib.ViewModels.Backend
  commentId: N:Swastika.Cms.Lib.ViewModels.Backend
  isExternal: true
  name: Swastika.Cms.Lib.ViewModels.Backend
  nameWithType: Swastika.Cms.Lib.ViewModels.Backend
  fullName: Swastika.Cms.Lib.ViewModels.Backend
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole
  isExternal: true
  name: ManageUserInRole
  nameWithType: ApiAccountController.ManageUserInRole
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.ManageUserInRole
- uid: Swastika.Identity.Models.AccountViewModels.UserRoleModel
  commentId: '!:Swastika.Identity.Models.AccountViewModels.UserRoleModel'
  isExternal: true
  name: UserRoleModel
  nameWithType: UserRoleModel
  fullName: Swastika.Identity.Models.AccountViewModels.UserRoleModel
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Details*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.Details
  isExternal: true
  name: Details
  nameWithType: ApiAccountController.Details
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Details
- uid: System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}
  commentId: '!:System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JObject}'
  definition: System.Threading.Tasks.Task`1
  name: Task<JObject>
  nameWithType: Task<JObject>
  fullName: System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JObject>
  nameWithType.vb: Task(Of JObject)
  fullName.vb: System.Threading.Tasks.Task(Of Newtonsoft.Json.Linq.JObject)
  name.vb: Task(Of JObject)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.Save*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.Save
  isExternal: true
  name: Save
  nameWithType: ApiAccountController.Save
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.Save
- uid: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
  commentId: T:Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
  parent: Swastika.Cms.Lib.ViewModels.Info
  isExternal: true
  name: InfoUserViewModel
  nameWithType: InfoUserViewModel
  fullName: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<InfoUserViewModel>>
  nameWithType: Task<RepositoryResponse<InfoUserViewModel>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel>>
  nameWithType.vb: Task(Of RepositoryResponse(Of InfoUserViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel))
  name.vb: Task(Of RepositoryResponse(Of InfoUserViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    name: InfoUserViewModel
    nameWithType: InfoUserViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    name: InfoUserViewModel
    nameWithType: InfoUserViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.ViewModels.Info
  commentId: N:Swastika.Cms.Lib.ViewModels.Info
  isExternal: true
  name: Swastika.Cms.Lib.ViewModels.Info
  nameWithType: Swastika.Cms.Lib.ViewModels.Info
  fullName: Swastika.Cms.Lib.ViewModels.Info
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.GetList*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.GetList
  isExternal: true
  name: GetList
  nameWithType: ApiAccountController.GetList
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.GetList
- uid: Swastika.Domain.Core.ViewModels.RequestPaging
  commentId: T:Swastika.Domain.Core.ViewModels.RequestPaging
  parent: Swastika.Domain.Core.ViewModels
  isExternal: true
  name: RequestPaging
  nameWithType: RequestPaging
  fullName: Swastika.Domain.Core.ViewModels.RequestPaging
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<PaginationModel<InfoUserViewModel>>>
  nameWithType: Task<RepositoryResponse<PaginationModel<InfoUserViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<Swastika.Domain.Core.ViewModels.PaginationModel<Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of PaginationModel(Of InfoUserViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of Swastika.Domain.Core.ViewModels.PaginationModel(Of Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel)))
  name.vb: Task(Of RepositoryResponse(Of PaginationModel(Of InfoUserViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    name: InfoUserViewModel
    nameWithType: InfoUserViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    name: InfoUserViewModel
    nameWithType: InfoUserViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Info.InfoUserViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels
  commentId: N:Swastika.Domain.Core.ViewModels
  isExternal: true
  name: Swastika.Domain.Core.ViewModels
  nameWithType: Swastika.Domain.Core.ViewModels
  fullName: Swastika.Domain.Core.ViewModels
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync
  isExternal: true
  name: GetClaimsAsync
  nameWithType: ApiAccountController.GetClaimsAsync
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.GetClaimsAsync
- uid: Swastika.Identity.Models.ApplicationUser
  commentId: T:Swastika.Identity.Models.ApplicationUser
  parent: Swastika.Identity.Models
  isExternal: true
  name: ApplicationUser
  nameWithType: ApplicationUser
  fullName: Swastika.Identity.Models.ApplicationUser
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{System.Security.Claims.Claim}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.List{System.Security.Claims.Claim}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<List<Claim>>
  nameWithType: Task<List<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of List(Of Claim))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of System.Security.Claims.Claim))
  name.vb: Task(Of List(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Identity.Models
  commentId: N:Swastika.Identity.Models
  isExternal: true
  name: Swastika.Identity.Models
  nameWithType: Swastika.Identity.Models
  fullName: Swastika.Identity.Models
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim
  isExternal: true
  name: CreateClaim
  nameWithType: ApiAccountController.CreateClaim
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.CreateClaim
- uid: System.Security.Claims.Claim
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage*
  commentId: Overload:Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage
  isExternal: true
  name: ErrorMessage
  nameWithType: ApiAccountController.ErrorMessage
  fullName: Swastika.Cms.Api.Controllers.ApiAccountController.ErrorMessage
