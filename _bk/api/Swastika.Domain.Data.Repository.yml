### YamlMime:ManagedReference
items:
- uid: Swastika.Domain.Data.Repository
  commentId: N:Swastika.Domain.Data.Repository
  id: Swastika.Domain.Data.Repository
  children:
  - Swastika.Domain.Data.Repository.DefaultRepository`2
  - Swastika.Domain.Data.Repository.DefaultRepository`3
  - Swastika.Domain.Data.Repository.ModelRepositoryBase`2
  - Swastika.Domain.Data.Repository.RepositoryBase`3
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: Swastika.Domain.Data.Repository
  nameWithType: Swastika.Domain.Data.Repository
  fullName: Swastika.Domain.Data.Repository
  type: Namespace
  assemblies:
  - Swastika
references:
- uid: Swastika.Domain.Data.Repository.DefaultRepository`2
  commentId: T:Swastika.Domain.Data.Repository.DefaultRepository`2
  parent: Swastika.Domain.Data.Repository
  isExternal: true
  name: DefaultRepository<TContext, TModel>
  nameWithType: DefaultRepository<TContext, TModel>
  fullName: Swastika.Domain.Data.Repository.DefaultRepository<TContext, TModel>
  nameWithType.vb: DefaultRepository(Of TContext, TModel)
  fullName.vb: Swastika.Domain.Data.Repository.DefaultRepository(Of TContext, TModel)
  name.vb: DefaultRepository(Of TContext, TModel)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.DefaultRepository`2
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Swastika.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.DefaultRepository`2
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Swastika.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.DefaultRepository`3
  commentId: T:Swastika.Domain.Data.Repository.DefaultRepository`3
  parent: Swastika.Domain.Data.Repository
  isExternal: true
  name: DefaultRepository<TDbContext, TModel, TView>
  nameWithType: DefaultRepository<TDbContext, TModel, TView>
  fullName: Swastika.Domain.Data.Repository.DefaultRepository<TDbContext, TModel, TView>
  nameWithType.vb: DefaultRepository(Of TDbContext, TModel, TView)
  fullName.vb: Swastika.Domain.Data.Repository.DefaultRepository(Of TDbContext, TModel, TView)
  name.vb: DefaultRepository(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Swastika.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.DefaultRepository`3
    name: DefaultRepository
    nameWithType: DefaultRepository
    fullName: Swastika.Domain.Data.Repository.DefaultRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
  commentId: T:Swastika.Domain.Data.Repository.ModelRepositoryBase`2
  isExternal: true
  name: ModelRepositoryBase<TDbContext, TModel>
  nameWithType: ModelRepositoryBase<TDbContext, TModel>
  fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase<TDbContext, TModel>
  nameWithType.vb: ModelRepositoryBase(Of TDbContext, TModel)
  fullName.vb: Swastika.Domain.Data.Repository.ModelRepositoryBase(Of TDbContext, TModel)
  name.vb: ModelRepositoryBase(Of TDbContext, TModel)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
    name: ModelRepositoryBase
    nameWithType: ModelRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ModelRepositoryBase`2
    name: ModelRepositoryBase
    nameWithType: ModelRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ModelRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.RepositoryBase`3
  commentId: T:Swastika.Domain.Data.Repository.RepositoryBase`3
  isExternal: true
  name: RepositoryBase<TModel, TView, TContext>
  nameWithType: RepositoryBase<TModel, TView, TContext>
  fullName: Swastika.Domain.Data.Repository.RepositoryBase<TModel, TView, TContext>
  nameWithType.vb: RepositoryBase(Of TModel, TView, TContext)
  fullName.vb: Swastika.Domain.Data.Repository.RepositoryBase(Of TModel, TView, TContext)
  name.vb: RepositoryBase(Of TModel, TView, TContext)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.RepositoryBase`3
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Swastika.Domain.Data.Repository.RepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.RepositoryBase`3
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Swastika.Domain.Data.Repository.RepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  commentId: T:Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  isExternal: true
  name: ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView)
  name.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
    name: ViewRepositoryBase
    nameWithType: ViewRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
    name: ViewRepositoryBase
    nameWithType: ViewRepositoryBase
    fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository
  commentId: N:Swastika.Domain.Data.Repository
  isExternal: true
  name: Swastika.Domain.Data.Repository
  nameWithType: Swastika.Domain.Data.Repository
  fullName: Swastika.Domain.Data.Repository
