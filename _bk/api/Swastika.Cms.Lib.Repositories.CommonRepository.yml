### YamlMime:ManagedReference
items:
- uid: Swastika.Cms.Lib.Repositories.CommonRepository
  commentId: T:Swastika.Cms.Lib.Repositories.CommonRepository
  id: CommonRepository
  parent: Swastika.Cms.Lib.Repositories
  children:
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Cms.Lib.Repositories.CommonRepository.Instance
  - Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  langs:
  - csharp
  - vb
  name: CommonRepository
  nameWithType: CommonRepository
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository
  type: Class
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: 'public class CommonRepository : Object'
    content.vb: >-
      Public Class CommonRepository
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetCategoryArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetCategoryArticleNav(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetCategoryArticleNav(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public RepositoryResponse<List<NavCategoryArticleViewModel>> GetCategoryArticleNav(string ArticleId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ArticleId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel}}
    content.vb: Public Function GetCategoryArticleNav(ArticleId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of NavCategoryArticleViewModel))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetCategoryArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetCategoryArticleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetCategoryArticleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public Task<RepositoryResponse<List<NavCategoryArticleViewModel>>> GetCategoryArticleNavAsync(string ArticleId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ArticleId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel}}}
    content.vb: Public Function GetCategoryArticleNavAsync(ArticleId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of NavCategoryArticleViewModel)))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModuleArticleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetModuleArticleNav(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetModuleArticleNav(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public RepositoryResponse<List<NavModuleArticleViewModel>> GetModuleArticleNav(string ArticleId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ArticleId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel}}
    content.vb: Public Function GetModuleArticleNav(ArticleId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of NavModuleArticleViewModel))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModuleArticleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetModuleArticleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetModuleArticleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public Task<RepositoryResponse<List<NavModuleArticleViewModel>>> GetModuleArticleNavAsync(string ArticleId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ArticleId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel}}}
    content.vb: Public Function GetModuleArticleNavAsync(ArticleId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of NavModuleArticleViewModel)))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetArticleModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetArticleModuleNav(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetArticleModuleNav(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public RepositoryResponse<List<NavArticleModuleViewModel>> GetArticleModuleNav(string ArticleId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ArticleId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel}}
    content.vb: Public Function GetArticleModuleNav(ArticleId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of NavArticleModuleViewModel))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetArticleModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetArticleModuleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetArticleModuleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public Task<RepositoryResponse<List<NavArticleModuleViewModel>>> GetArticleModuleNavAsync(string ArticleId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ArticleId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel}}}
    content.vb: Public Function GetArticleModuleNavAsync(ArticleId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of NavArticleModuleViewModel)))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetCategoryProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetCategoryProductNav(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetCategoryProductNav(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public RepositoryResponse<List<NavCategoryProductViewModel>> GetCategoryProductNav(string ProductId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ProductId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel}}
    content.vb: Public Function GetCategoryProductNav(ProductId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of NavCategoryProductViewModel))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetCategoryProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetCategoryProductNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetCategoryProductNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public Task<RepositoryResponse<List<NavCategoryProductViewModel>>> GetCategoryProductNavAsync(string ProductId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ProductId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel}}}
    content.vb: Public Function GetCategoryProductNavAsync(ProductId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of NavCategoryProductViewModel)))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModuleProductNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetModuleProductNav(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetModuleProductNav(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public RepositoryResponse<List<NavModuleProductViewModel>> GetModuleProductNav(string ProductId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ProductId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel}}
    content.vb: Public Function GetModuleProductNav(ProductId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of NavModuleProductViewModel))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModuleProductNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetModuleProductNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetModuleProductNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public Task<RepositoryResponse<List<NavModuleProductViewModel>>> GetModuleProductNavAsync(string ProductId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ProductId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel}}}
    content.vb: Public Function GetModuleProductNavAsync(ProductId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of NavModuleProductViewModel)))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetProductModuleNav(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetProductModuleNav(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetProductModuleNav(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public RepositoryResponse<List<NavProductModuleViewModel>> GetProductModuleNav(string ProductId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ProductId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel}}
    content.vb: Public Function GetProductModuleNav(ProductId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of NavProductModuleViewModel))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetProductModuleNavAsync(System.String,System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: GetProductModuleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.GetProductModuleNavAsync(String, String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync(System.String, System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public Task<RepositoryResponse<List<NavProductModuleViewModel>>> GetProductModuleNavAsync(string ProductId, string specificulture, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: ProductId
      type: System.String
    - id: specificulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel}}}
    content.vb: Public Function GetProductModuleNavAsync(ProductId As String, specificulture As String, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of NavProductModuleViewModel)))
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: LoadCultures(System.String,Swastika.Cms.Lib.Models.Cms.SiocCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: LoadCultures(String, SiocCmsContext, IDbContextTransaction)
  nameWithType: CommonRepository.LoadCultures(String, SiocCmsContext, IDbContextTransaction)
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures(System.String, Swastika.Cms.Lib.Models.Cms.SiocCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public List<SupportedCulture> LoadCultures(string initCulture = null, SiocCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: initCulture
      type: System.String
    - id: _context
      type: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Collections.Generic.List{Swastika.Domain.Core.Models.SupportedCulture}
    content.vb: Public Function LoadCultures(initCulture As String = Nothing, _context As SiocCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As List(Of SupportedCulture)
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.Instance
  commentId: P:Swastika.Cms.Lib.Repositories.CommonRepository.Instance
  id: Instance
  parent: Swastika.Cms.Lib.Repositories.CommonRepository
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: CommonRepository.Instance
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.Instance
  type: Property
  source:
    path: Swastika.Cms.Lib
    isExternal: true
  assemblies:
  - Swastika.Cms.Lib
  namespace: Swastika.Cms.Lib.Repositories
  syntax:
    content: public static CommonRepository Instance { get; }
    parameters: []
    return:
      type: Swastika.Cms.Lib.Repositories.CommonRepository
    content.vb: Public Shared ReadOnly Property Instance As CommonRepository
  overload: Swastika.Cms.Lib.Repositories.CommonRepository.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Swastika.Cms.Lib.Repositories
  commentId: N:Swastika.Cms.Lib.Repositories
  isExternal: true
  name: Swastika.Cms.Lib.Repositories
  nameWithType: Swastika.Cms.Lib.Repositories
  fullName: Swastika.Cms.Lib.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav
  isExternal: true
  name: GetCategoryArticleNav
  nameWithType: CommonRepository.GetCategoryArticleNav
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNav
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
  commentId: T:Swastika.Cms.Lib.Models.Cms.SiocCmsContext
  parent: Swastika.Cms.Lib.Models.Cms
  isExternal: true
  name: SiocCmsContext
  nameWithType: SiocCmsContext
  fullName: Swastika.Cms.Lib.Models.Cms.SiocCmsContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<NavCategoryArticleViewModel>>
  nameWithType: RepositoryResponse<List<NavCategoryArticleViewModel>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel>>
  nameWithType.vb: RepositoryResponse(Of List(Of NavCategoryArticleViewModel))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel))
  name.vb: RepositoryResponse(Of List(Of NavCategoryArticleViewModel))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    name: NavCategoryArticleViewModel
    nameWithType: NavCategoryArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    name: NavCategoryArticleViewModel
    nameWithType: NavCategoryArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Models.Cms
  commentId: N:Swastika.Cms.Lib.Models.Cms
  isExternal: true
  name: Swastika.Cms.Lib.Models.Cms
  nameWithType: Swastika.Cms.Lib.Models.Cms
  fullName: Swastika.Cms.Lib.Models.Cms
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  isExternal: true
  name: RepositoryResponse<TResult>
  nameWithType: RepositoryResponse<TResult>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<TResult>
  nameWithType.vb: RepositoryResponse(Of TResult)
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of TResult)
  name.vb: RepositoryResponse(Of TResult)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels
  commentId: N:Swastika.Domain.Core.ViewModels
  isExternal: true
  name: Swastika.Domain.Core.ViewModels
  nameWithType: Swastika.Domain.Core.ViewModels
  fullName: Swastika.Domain.Core.ViewModels
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync
  isExternal: true
  name: GetCategoryArticleNavAsync
  nameWithType: CommonRepository.GetCategoryArticleNavAsync
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryArticleNavAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<NavCategoryArticleViewModel>>>
  nameWithType: Task<RepositoryResponse<List<NavCategoryArticleViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of NavCategoryArticleViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of NavCategoryArticleViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    name: NavCategoryArticleViewModel
    nameWithType: NavCategoryArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    name: NavCategoryArticleViewModel
    nameWithType: NavCategoryArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryArticleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav
  isExternal: true
  name: GetModuleArticleNav
  nameWithType: CommonRepository.GetModuleArticleNav
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNav
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<NavModuleArticleViewModel>>
  nameWithType: RepositoryResponse<List<NavModuleArticleViewModel>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel>>
  nameWithType.vb: RepositoryResponse(Of List(Of NavModuleArticleViewModel))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel))
  name.vb: RepositoryResponse(Of List(Of NavModuleArticleViewModel))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    name: NavModuleArticleViewModel
    nameWithType: NavModuleArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    name: NavModuleArticleViewModel
    nameWithType: NavModuleArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync
  isExternal: true
  name: GetModuleArticleNavAsync
  nameWithType: CommonRepository.GetModuleArticleNavAsync
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleArticleNavAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<NavModuleArticleViewModel>>>
  nameWithType: Task<RepositoryResponse<List<NavModuleArticleViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of NavModuleArticleViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of NavModuleArticleViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    name: NavModuleArticleViewModel
    nameWithType: NavModuleArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    name: NavModuleArticleViewModel
    nameWithType: NavModuleArticleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleArticleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav
  isExternal: true
  name: GetArticleModuleNav
  nameWithType: CommonRepository.GetArticleModuleNav
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNav
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<NavArticleModuleViewModel>>
  nameWithType: RepositoryResponse<List<NavArticleModuleViewModel>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel>>
  nameWithType.vb: RepositoryResponse(Of List(Of NavArticleModuleViewModel))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel))
  name.vb: RepositoryResponse(Of List(Of NavArticleModuleViewModel))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    name: NavArticleModuleViewModel
    nameWithType: NavArticleModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    name: NavArticleModuleViewModel
    nameWithType: NavArticleModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync
  isExternal: true
  name: GetArticleModuleNavAsync
  nameWithType: CommonRepository.GetArticleModuleNavAsync
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetArticleModuleNavAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<NavArticleModuleViewModel>>>
  nameWithType: Task<RepositoryResponse<List<NavArticleModuleViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of NavArticleModuleViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of NavArticleModuleViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    name: NavArticleModuleViewModel
    nameWithType: NavArticleModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    name: NavArticleModuleViewModel
    nameWithType: NavArticleModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavArticleModuleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav
  isExternal: true
  name: GetCategoryProductNav
  nameWithType: CommonRepository.GetCategoryProductNav
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNav
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<NavCategoryProductViewModel>>
  nameWithType: RepositoryResponse<List<NavCategoryProductViewModel>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel>>
  nameWithType.vb: RepositoryResponse(Of List(Of NavCategoryProductViewModel))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel))
  name.vb: RepositoryResponse(Of List(Of NavCategoryProductViewModel))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    name: NavCategoryProductViewModel
    nameWithType: NavCategoryProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    name: NavCategoryProductViewModel
    nameWithType: NavCategoryProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync
  isExternal: true
  name: GetCategoryProductNavAsync
  nameWithType: CommonRepository.GetCategoryProductNavAsync
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetCategoryProductNavAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<NavCategoryProductViewModel>>>
  nameWithType: Task<RepositoryResponse<List<NavCategoryProductViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of NavCategoryProductViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of NavCategoryProductViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    name: NavCategoryProductViewModel
    nameWithType: NavCategoryProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    name: NavCategoryProductViewModel
    nameWithType: NavCategoryProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavCategoryProductViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav
  isExternal: true
  name: GetModuleProductNav
  nameWithType: CommonRepository.GetModuleProductNav
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNav
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<NavModuleProductViewModel>>
  nameWithType: RepositoryResponse<List<NavModuleProductViewModel>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel>>
  nameWithType.vb: RepositoryResponse(Of List(Of NavModuleProductViewModel))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel))
  name.vb: RepositoryResponse(Of List(Of NavModuleProductViewModel))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    name: NavModuleProductViewModel
    nameWithType: NavModuleProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    name: NavModuleProductViewModel
    nameWithType: NavModuleProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync
  isExternal: true
  name: GetModuleProductNavAsync
  nameWithType: CommonRepository.GetModuleProductNavAsync
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetModuleProductNavAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<NavModuleProductViewModel>>>
  nameWithType: Task<RepositoryResponse<List<NavModuleProductViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of NavModuleProductViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of NavModuleProductViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    name: NavModuleProductViewModel
    nameWithType: NavModuleProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    name: NavModuleProductViewModel
    nameWithType: NavModuleProductViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavModuleProductViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav
  isExternal: true
  name: GetProductModuleNav
  nameWithType: CommonRepository.GetProductModuleNav
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNav
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<NavProductModuleViewModel>>
  nameWithType: RepositoryResponse<List<NavProductModuleViewModel>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel>>
  nameWithType.vb: RepositoryResponse(Of List(Of NavProductModuleViewModel))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel))
  name.vb: RepositoryResponse(Of List(Of NavProductModuleViewModel))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    name: NavProductModuleViewModel
    nameWithType: NavProductModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    name: NavProductModuleViewModel
    nameWithType: NavProductModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync
  isExternal: true
  name: GetProductModuleNavAsync
  nameWithType: CommonRepository.GetProductModuleNavAsync
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.GetProductModuleNavAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<NavProductModuleViewModel>>>
  nameWithType: Task<RepositoryResponse<List<NavProductModuleViewModel>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of NavProductModuleViewModel)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel)))
  name.vb: Task(Of RepositoryResponse(Of List(Of NavProductModuleViewModel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    name: NavProductModuleViewModel
    nameWithType: NavProductModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    name: NavProductModuleViewModel
    nameWithType: NavProductModuleViewModel
    fullName: Swastika.Cms.Lib.ViewModels.Navigation.NavProductModuleViewModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures
  isExternal: true
  name: LoadCultures
  nameWithType: CommonRepository.LoadCultures
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.LoadCultures
- uid: System.Collections.Generic.List{Swastika.Domain.Core.Models.SupportedCulture}
  commentId: '!:System.Collections.Generic.List{Swastika.Domain.Core.Models.SupportedCulture}'
  definition: System.Collections.Generic.List`1
  name: List<SupportedCulture>
  nameWithType: List<SupportedCulture>
  fullName: System.Collections.Generic.List<Swastika.Domain.Core.Models.SupportedCulture>
  nameWithType.vb: List(Of SupportedCulture)
  fullName.vb: System.Collections.Generic.List(Of Swastika.Domain.Core.Models.SupportedCulture)
  name.vb: List(Of SupportedCulture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Swastika.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Swastika.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Cms.Lib.Repositories.CommonRepository.Instance*
  commentId: Overload:Swastika.Cms.Lib.Repositories.CommonRepository.Instance
  isExternal: true
  name: Instance
  nameWithType: CommonRepository.Instance
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository.Instance
- uid: Swastika.Cms.Lib.Repositories.CommonRepository
  commentId: T:Swastika.Cms.Lib.Repositories.CommonRepository
  parent: Swastika.Cms.Lib.Repositories
  isExternal: true
  name: CommonRepository
  nameWithType: CommonRepository
  fullName: Swastika.Cms.Lib.Repositories.CommonRepository
