### YamlMime:ManagedReference
items:
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  commentId: T:Swastika.Domain.Core.ViewModels.ViewModelBase`2
  id: ViewModelBase`2
  parent: Swastika.Domain.Core.ViewModels
  children:
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor(`0,System.String)
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor(System.String)
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.DomainName
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.ListSupportedCulture
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.Mapper
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.Model
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.ModelMapper
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseModel
  - Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseView
  langs:
  - csharp
  - vb
  name: ViewModelBase<TModel, TView>
  nameWithType: ViewModelBase<TModel, TView>
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>
  type: Class
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: 'public abstract class ViewModelBase<TModel, TView> : Object where TModel : class where TView : ViewModelBase<TModel, TView>'
    typeParameters:
    - id: TModel
    - id: TView
    content.vb: >-
      Public MustInherit Class ViewModelBase(Of TModel As Class, TView As ViewModelBase(Of TModel, TView))
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: ViewModelBase(Of TModel, TView)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView)
  name.vb: ViewModelBase(Of TModel, TView)
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor(System.String)
  commentId: M:Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: ViewModelBase(String)
  nameWithType: ViewModelBase<TModel, TView>.ViewModelBase(String)
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ViewModelBase(System.String)
  type: Constructor
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: protected ViewModelBase(string domainName = "/")
    parameters:
    - id: domainName
      type: System.String
    content.vb: Protected Sub New(domainName As String = "/")
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor*
  nameWithType.vb: ViewModelBase(Of TModel, TView).ViewModelBase(String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ViewModelBase(System.String)
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor(`0,System.String)
  commentId: M:Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor(`0,System.String)
  id: '#ctor(`0,System.String)'
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: ViewModelBase(TModel, String)
  nameWithType: ViewModelBase<TModel, TView>.ViewModelBase(TModel, String)
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ViewModelBase(TModel, System.String)
  type: Constructor
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: protected ViewModelBase(TModel model, string domainName = "/")
    parameters:
    - id: model
      type: '{TModel}'
    - id: domainName
      type: System.String
    content.vb: Protected Sub New(model As TModel, domainName As String = "/")
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor*
  nameWithType.vb: ViewModelBase(Of TModel, TView).ViewModelBase(TModel, String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ViewModelBase(TModel, System.String)
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseModel
  commentId: M:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseModel
  id: ParseModel
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: ParseModel()
  nameWithType: ViewModelBase<TModel, TView>.ParseModel()
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ParseModel()
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public virtual TModel ParseModel()
    return:
      type: '{TModel}'
    content.vb: Public Overridable Function ParseModel As TModel
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseModel*
  nameWithType.vb: ViewModelBase(Of TModel, TView).ParseModel()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ParseModel()
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseView
  commentId: M:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseView
  id: ParseView
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: ParseView()
  nameWithType: ViewModelBase<TModel, TView>.ParseView()
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ParseView()
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public virtual TView ParseView()
    return:
      type: '{TView}'
    content.vb: Public Overridable Function ParseView As TView
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseView*
  nameWithType.vb: ViewModelBase(Of TModel, TView).ParseView()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ParseView()
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.DomainName
  commentId: P:Swastika.Domain.Core.ViewModels.ViewModelBase`2.DomainName
  id: DomainName
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: DomainName
  nameWithType: ViewModelBase<TModel, TView>.DomainName
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.DomainName
  type: Property
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public string DomainName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DomainName As String
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.DomainName*
  nameWithType.vb: ViewModelBase(Of TModel, TView).DomainName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).DomainName
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ListSupportedCulture
  commentId: P:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ListSupportedCulture
  id: ListSupportedCulture
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: ListSupportedCulture
  nameWithType: ViewModelBase<TModel, TView>.ListSupportedCulture
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ListSupportedCulture
  type: Property
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public List<SupportedCulture> ListSupportedCulture { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Swastika.Domain.Core.Models.SupportedCulture}
    content.vb: Public Property ListSupportedCulture As List(Of SupportedCulture)
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ListSupportedCulture*
  nameWithType.vb: ViewModelBase(Of TModel, TView).ListSupportedCulture
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ListSupportedCulture
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.Mapper
  commentId: P:Swastika.Domain.Core.ViewModels.ViewModelBase`2.Mapper
  id: Mapper
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: Mapper
  nameWithType: ViewModelBase<TModel, TView>.Mapper
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.Mapper
  type: Property
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public IMapper Mapper { get; set; }
    parameters: []
    return:
      type: AutoMapper.IMapper
    content.vb: Public Property Mapper As IMapper
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.Mapper*
  nameWithType.vb: ViewModelBase(Of TModel, TView).Mapper
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).Mapper
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.Model
  commentId: P:Swastika.Domain.Core.ViewModels.ViewModelBase`2.Model
  id: Model
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: ViewModelBase<TModel, TView>.Model
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.Model
  type: Property
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public TModel Model { get; set; }
    parameters: []
    return:
      type: '{TModel}'
    content.vb: Public Property Model As TModel
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.Model*
  nameWithType.vb: ViewModelBase(Of TModel, TView).Model
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).Model
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ModelMapper
  commentId: P:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ModelMapper
  id: ModelMapper
  parent: Swastika.Domain.Core.ViewModels.ViewModelBase`2
  langs:
  - csharp
  - vb
  name: ModelMapper
  nameWithType: ViewModelBase<TModel, TView>.ModelMapper
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ModelMapper
  type: Property
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Core.ViewModels
  syntax:
    content: public IMapper ModelMapper { get; set; }
    parameters: []
    return:
      type: AutoMapper.IMapper
    content.vb: Public Property ModelMapper As IMapper
  overload: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ModelMapper*
  nameWithType.vb: ViewModelBase(Of TModel, TView).ModelMapper
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ModelMapper
references:
- uid: Swastika.Domain.Core.ViewModels
  commentId: N:Swastika.Domain.Core.ViewModels
  isExternal: true
  name: Swastika.Domain.Core.ViewModels
  nameWithType: Swastika.Domain.Core.ViewModels
  fullName: Swastika.Domain.Core.ViewModels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.#ctor
  isExternal: true
  name: ViewModelBase
  nameWithType: ViewModelBase<TModel, TView>.ViewModelBase
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ViewModelBase
  nameWithType.vb: ViewModelBase(Of TModel, TView).ViewModelBase
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ViewModelBase
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TModel}'
  commentId: '!:TModel'
  definition: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseModel*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseModel
  isExternal: true
  name: ParseModel
  nameWithType: ViewModelBase<TModel, TView>.ParseModel
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ParseModel
  nameWithType.vb: ViewModelBase(Of TModel, TView).ParseModel
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ParseModel
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseView*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ParseView
  isExternal: true
  name: ParseView
  nameWithType: ViewModelBase<TModel, TView>.ParseView
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ParseView
  nameWithType.vb: ViewModelBase(Of TModel, TView).ParseView
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ParseView
- uid: '{TView}'
  commentId: '!:TView'
  definition: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.DomainName*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.DomainName
  isExternal: true
  name: DomainName
  nameWithType: ViewModelBase<TModel, TView>.DomainName
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.DomainName
  nameWithType.vb: ViewModelBase(Of TModel, TView).DomainName
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).DomainName
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ListSupportedCulture*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ListSupportedCulture
  isExternal: true
  name: ListSupportedCulture
  nameWithType: ViewModelBase<TModel, TView>.ListSupportedCulture
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ListSupportedCulture
  nameWithType.vb: ViewModelBase(Of TModel, TView).ListSupportedCulture
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ListSupportedCulture
- uid: System.Collections.Generic.List{Swastika.Domain.Core.Models.SupportedCulture}
  commentId: '!:System.Collections.Generic.List{Swastika.Domain.Core.Models.SupportedCulture}'
  definition: System.Collections.Generic.List`1
  name: List<SupportedCulture>
  nameWithType: List<SupportedCulture>
  fullName: System.Collections.Generic.List<Swastika.Domain.Core.Models.SupportedCulture>
  nameWithType.vb: List(Of SupportedCulture)
  fullName.vb: System.Collections.Generic.List(Of Swastika.Domain.Core.Models.SupportedCulture)
  name.vb: List(Of SupportedCulture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Swastika.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Swastika.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.Mapper*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.Mapper
  isExternal: true
  name: Mapper
  nameWithType: ViewModelBase<TModel, TView>.Mapper
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.Mapper
  nameWithType.vb: ViewModelBase(Of TModel, TView).Mapper
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).Mapper
- uid: AutoMapper.IMapper
  isExternal: true
  name: IMapper
  nameWithType: IMapper
  fullName: AutoMapper.IMapper
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.Model*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.Model
  isExternal: true
  name: Model
  nameWithType: ViewModelBase<TModel, TView>.Model
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.Model
  nameWithType.vb: ViewModelBase(Of TModel, TView).Model
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).Model
- uid: Swastika.Domain.Core.ViewModels.ViewModelBase`2.ModelMapper*
  commentId: Overload:Swastika.Domain.Core.ViewModels.ViewModelBase`2.ModelMapper
  isExternal: true
  name: ModelMapper
  nameWithType: ViewModelBase<TModel, TView>.ModelMapper
  fullName: Swastika.Domain.Core.ViewModels.ViewModelBase<TModel, TView>.ModelMapper
  nameWithType.vb: ViewModelBase(Of TModel, TView).ModelMapper
  fullName.vb: Swastika.Domain.Core.ViewModels.ViewModelBase(Of TModel, TView).ModelMapper
