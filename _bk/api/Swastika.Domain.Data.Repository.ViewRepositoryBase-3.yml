### YamlMime:ManagedReference
items:
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  commentId: T:Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  id: ViewRepositoryBase`3
  parent: Swastika.Domain.Data.Repository
  children:
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.#ctor
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  langs:
  - csharp
  - vb
  name: ViewRepositoryBase<TDbContext, TModel, TView>
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>
  type: Class
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: 'public abstract class ViewRepositoryBase<TDbContext, TModel, TView> : Object where TDbContext : DbContext where TModel : class where TView : ViewModelBase<TDbContext, TModel, TView>'
    typeParameters:
    - id: TDbContext
    - id: TModel
    - id: TView
    content.vb: >-
      Public MustInherit Class ViewRepositoryBase(Of TDbContext As DbContext, TModel As Class, TView As ViewModelBase(Of TDbContext, TModel, TView))
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - Swastika.Domain.Data.Repository.DefaultRepository`3
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView)
  name.vb: ViewRepositoryBase(Of TDbContext, TModel, TView)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.#ctor
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.#ctor
  id: '#ctor'
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: ViewRepositoryBase()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ViewRepositoryBase()
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ViewRepositoryBase()
  type: Constructor
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: protected ViewRepositoryBase()
    content.vb: Protected Sub New
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.#ctor*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ViewRepositoryBase()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ViewRepositoryBase()
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CheckIsExists(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual bool CheckIsExists(TModel entity, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: entity
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Boolean
    content.vb: Public Overridable Function CheckIsExists(entity As TModel, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Boolean
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CheckIsExists(System.Func{`1,System.Boolean},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(Func<TModel, Boolean>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists(System.Func<TModel, System.Boolean>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public bool CheckIsExists(Func<TModel, bool> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Func{{TModel},System.Boolean}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Boolean
    content.vb: Public Function CheckIsExists(predicate As Func(Of TModel, Boolean), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Boolean
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists(System.Func(Of TModel, System.Boolean), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CheckIsExists(Func(Of TModel, Boolean), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CreateModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateModel(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel(TView, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<TView> CreateModel(TView view, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}
    content.vb: Public Overridable Function CreateModel(view As TView, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of TView)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel(TView, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CreateModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<TView>> CreateModelAsync(TView view, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
    content.vb: Public Overridable Function CreateModelAsync(view As TView, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync(TView, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: EditModel(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: EditModel(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModel(TView, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<TView> EditModel(TView view, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}
    content.vb: Public Overridable Function EditModel(view As TView, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of TView)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel(TView, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: EditModelAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: EditModelAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<TView>> EditModelAsync(TView view, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
    content.vb: Public Overridable Function EditModelAsync(view As TView, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync(TView, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetSingleModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<TView> GetSingleModel(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}
    content.vb: Public Overridable Function GetSingleModel(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of TView)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetSingleModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<TView>> GetSingleModelAsync(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
    content.vb: Public Overridable Function GetSingleModelAsync(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetSingleModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  id: InitContext
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: InitContext()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.InitContext()
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.InitContext()
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual TDbContext InitContext()
    return:
      type: '{TDbContext}'
    content.vb: Public Overridable Function InitContext As TDbContext
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.InitContext*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext()
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage(System.Exception)
  id: LogErrorMessage(System.Exception)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: LogErrorMessage(Exception)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage(Exception)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage(System.Exception)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual void LogErrorMessage(Exception ex)
    parameters:
    - id: ex
      type: System.Exception
    content.vb: Public Overridable Sub LogErrorMessage(ex As Exception)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage(Exception)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage(System.Exception)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParsePagingQuery(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: ParsePagingQuery(IQueryable<TModel>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery(IQueryable<TModel>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery(System.Linq.IQueryable<TModel>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual PaginationModel<TView> ParsePagingQuery(IQueryable<TModel> query, string orderByPropertyName, OrderByDirection direction, Nullable<int> pageSize, Nullable<int> pageIndex, TDbContext context, IDbContextTransaction transaction)
    parameters:
    - id: query
      type: System.Linq.IQueryable{{TModel}}
    - id: orderByPropertyName
      type: System.String
    - id: direction
      type: Microsoft.Data.OData.Query.OrderByDirection
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: context
      type: '{TDbContext}'
    - id: transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}
    content.vb: Public Overridable Function ParsePagingQuery(query As IQueryable(Of TModel), orderByPropertyName As String, direction As OrderByDirection, pageSize As Nullable(Of Integer), pageIndex As Nullable(Of Integer), context As TDbContext, transaction As IDbContextTransaction) As PaginationModel(Of TView)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery(IQueryable(Of TModel), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery(System.Linq.IQueryable(Of TModel), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParsePagingQuery(IQueryable(Of TModel), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParsePagingQueryAsync(System.Linq.IQueryable{`1},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: ParsePagingQueryAsync(IQueryable<TModel>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync(IQueryable<TModel>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync(System.Linq.IQueryable<TModel>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<PaginationModel<TView>> ParsePagingQueryAsync(IQueryable<TModel> query, string orderByPropertyName, OrderByDirection direction, Nullable<int> pageSize, Nullable<int> pageIndex, TDbContext context, IDbContextTransaction transaction)
    parameters:
    - id: query
      type: System.Linq.IQueryable{{TModel}}
    - id: orderByPropertyName
      type: System.String
    - id: direction
      type: Microsoft.Data.OData.Query.OrderByDirection
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: context
      type: '{TDbContext}'
    - id: transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}
    content.vb: Public Overridable Function ParsePagingQueryAsync(query As IQueryable(Of TModel), orderByPropertyName As String, direction As OrderByDirection, pageSize As Nullable(Of Integer), pageIndex As Nullable(Of Integer), context As TDbContext, transaction As IDbContextTransaction) As Task(Of PaginationModel(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync(IQueryable(Of TModel), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync(System.Linq.IQueryable(Of TModel), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParsePagingQueryAsync(IQueryable(Of TModel), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParseView(System.Collections.Generic.List{`1},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: ParseView(List<TModel>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(List<TModel>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(System.Collections.Generic.List<TModel>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual List<TView> ParseView(List<TModel> lstModels, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: lstModels
      type: System.Collections.Generic.List{{TModel}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Collections.Generic.List{{TView}}
    content.vb: Public Overridable Function ParseView(lstModels As List(Of TModel), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As List(Of TView)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(List(Of TModel), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(System.Collections.Generic.List(Of TModel), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: ParseView(List(Of TModel), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParseView(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: ParseView(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual TView ParseView(TModel model, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: '{TView}'
    content.vb: Public Overridable Function ParseView(model As TModel, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As TView
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  id: RegisterAutoMapper
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RegisterAutoMapper()
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper()
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper()
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual void RegisterAutoMapper()
    content.vb: Public Overridable Sub RegisterAutoMapper
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper()
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelList(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelList(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<List<TView>> GetModelList(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}
    content.vb: Public Overridable Function GetModelList(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelList(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelList(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<PaginationModel<TView>> GetModelList(string orderByPropertyName, OrderByDirection direction, Nullable<int> pageSize, Nullable<int> pageIndex, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: orderByPropertyName
      type: System.String
    - id: direction
      type: Microsoft.Data.OData.Query.OrderByDirection
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}
    content.vb: Public Overridable Function GetModelList(orderByPropertyName As String, direction As OrderByDirection, pageSize As Nullable(Of Integer), pageIndex As Nullable(Of Integer), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of PaginationModel(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelList(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelListAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelListAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<List<TView>>> GetModelListAsync(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}}
    content.vb: Public Overridable Function GetModelListAsync(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of TView)))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelListAsync(System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelListAsync(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<PaginationModel<TView>>> GetModelListAsync(string orderByPropertyName, OrderByDirection direction, Nullable<int> pageSize, Nullable<int> pageIndex, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: orderByPropertyName
      type: System.String
    - id: direction
      type: Microsoft.Data.OData.Query.OrderByDirection
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}}
    content.vb: Public Overridable Function GetModelListAsync(orderByPropertyName As String, direction As OrderByDirection, pageSize As Nullable(Of Integer), pageIndex As Nullable(Of Integer), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of PaginationModel(Of TView)))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync(System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListAsync(String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<List<TView>> GetModelListBy(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}
    content.vb: Public Overridable Function GetModelListBy(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of List(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelListBy(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelListBy(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<PaginationModel<TView>> GetModelListBy(Expression<Func<TModel, bool>> predicate, string orderByPropertyName, OrderByDirection direction, Nullable<int> pageSize, Nullable<int> pageIndex, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: orderByPropertyName
      type: System.String
    - id: direction
      type: Microsoft.Data.OData.Query.OrderByDirection
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}
    content.vb: Public Overridable Function GetModelListBy(predicate As Expression(Of Func(Of TModel, Boolean)), orderByPropertyName As String, direction As OrderByDirection, pageSize As Nullable(Of Integer), pageIndex As Nullable(Of Integer), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of PaginationModel(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListBy(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<List<TView>>> GetModelListByAsync(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}}
    content.vb: Public Overridable Function GetModelListByAsync(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of List(Of TView)))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: GetModelListByAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.String,Microsoft.Data.OData.Query.OrderByDirection,System.Nullable{System.Int32},System.Nullable{System.Int32},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(Expression<Func<TModel, Boolean>>, String, OrderByDirection, Nullable<Int32>, Nullable<Int32>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable<System.Int32>, System.Nullable<System.Int32>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<PaginationModel<TView>>> GetModelListByAsync(Expression<Func<TModel, bool>> predicate, string orderByPropertyName, OrderByDirection direction, Nullable<int> pageSize, Nullable<int> pageIndex, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: orderByPropertyName
      type: System.String
    - id: direction
      type: Microsoft.Data.OData.Query.OrderByDirection
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}}
    content.vb: Public Overridable Function GetModelListByAsync(predicate As Expression(Of Func(Of TModel, Boolean)), orderByPropertyName As String, direction As OrderByDirection, pageSize As Nullable(Of Integer), pageIndex As Nullable(Of Integer), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of PaginationModel(Of TView)))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.String, Microsoft.Data.OData.Query.OrderByDirection, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: GetModelListByAsync(Expression(Of Func(Of TModel, Boolean)), String, OrderByDirection, Nullable(Of Int32), Nullable(Of Int32), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveListModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<bool> RemoveListModel(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Overridable Function RemoveListModel(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveListModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<bool>> RemoveListModelAsync(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overridable Function RemoveListModelAsync(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveListModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModel(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<bool> RemoveModel(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Overridable Function RemoveModel(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModel(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModel(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveModel(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<bool> RemoveModel(TModel model, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Overridable Function RemoveModel(model As TModel, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModelAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<bool>> RemoveModelAsync(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overridable Function RemoveModelAsync(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: RemoveModelAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<bool>> RemoveModelAsync(TModel model, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: '{TModel}'
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overridable Function RemoveModelAsync(model As TModel, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveModel(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<TView> SaveModel(TView view, bool isSaveSubModels = false, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: isSaveSubModels
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}
    content.vb: Public Overridable Function SaveModel(view As TView, isSaveSubModels As Boolean = False, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of TView)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel(TView, Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveModelAsync(`2,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<TView>> SaveModelAsync(TView view, bool isSaveSubModels = false, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: view
      type: '{TView}'
    - id: isSaveSubModels
      type: System.Boolean
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
    content.vb: Public Overridable Function SaveModelAsync(view As TView, isSaveSubModels As Boolean = False, _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of TView))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync(TView, Boolean, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync(TView, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveSubModelAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<bool> SaveSubModelAsync(TModel model, TDbContext context, IDbContextTransaction _transaction)
    parameters:
    - id: model
      type: '{TModel}'
    - id: context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Overridable Function SaveSubModelAsync(model As TModel, context As TDbContext, _transaction As IDbContextTransaction) As Task(Of Boolean)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync(TModel, TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Max(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: Max(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Max(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Max(System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<int> Max(Expression<Func<TModel, int>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}
    content.vb: Public Overridable Function Max(predicate As Expression(Of Func(Of TModel, Integer)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Integer)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Max*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Max(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Max(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Max(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: MaxAsync(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync(Expression<Func<TModel, Int32>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<int>> MaxAsync(Expression<Func<TModel, int>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}}
    content.vb: Public Overridable Function MaxAsync(predicate As Expression(Of Func(Of TModel, Integer)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Integer))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: MaxAsync(Expression(Of Func(Of TModel, Int32)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: Count(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<int> Count(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}
    content.vb: Public Overridable Function Count(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Integer)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Count(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CountAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(Expression<Func<TModel, Boolean>>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<int>> CountAsync(Expression<Func<TModel, bool>> predicate, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}}
    content.vb: Public Overridable Function CountAsync(predicate As Expression(Of Func(Of TModel, Boolean)), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Integer))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CountAsync(Expression(Of Func(Of TModel, Boolean)), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Count(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: Count(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count(TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual RepositoryResponse<int> Count(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}
    content.vb: Public Overridable Function Count(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Integer)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: CountAsync(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CountAsync(TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public virtual Task<RepositoryResponse<int>> CountAsync(TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}}
    content.vb: Public Overridable Function CountAsync(_context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Integer))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: UpdateFields(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: UpdateFields(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Collections.Generic.List<Swastika.Domain.Core.ViewModels.EntityField>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public RepositoryResponse<bool> UpdateFields(Expression<Func<TModel, bool>> predicate, List<EntityField> fields, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: fields
      type: System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Function UpdateFields(predicate As Expression(Of Func(Of TModel, Boolean)), fields As List(Of EntityField), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.Collections.Generic.List(Of Swastika.Domain.Core.ViewModels.EntityField), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: UpdateFields(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: UpdateFieldsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: UpdateFieldsAsync(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync(Expression<Func<TModel, Boolean>>, List<EntityField>, TDbContext, IDbContextTransaction)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Collections.Generic.List<Swastika.Domain.Core.ViewModels.EntityField>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: public Task<RepositoryResponse<bool>> UpdateFieldsAsync(Expression<Func<TModel, bool>> predicate, List<EntityField> fields, TDbContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
    - id: fields
      type: System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField}
    - id: _context
      type: '{TDbContext}'
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Function UpdateFieldsAsync(predicate As Expression(Of Func(Of TModel, Boolean)), fields As List(Of EntityField), _context As TDbContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean)), System.Collections.Generic.List(Of Swastika.Domain.Core.ViewModels.EntityField), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: UpdateFieldsAsync(Expression(Of Func(Of TModel, Boolean)), List(Of EntityField), TDbContext, IDbContextTransaction)
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
  commentId: M:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda(System.String,System.Boolean)
  id: GetLambda(System.String,System.Boolean)
  parent: Swastika.Domain.Data.Repository.ViewRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetLambda(String, Boolean)
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda(String, Boolean)
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda(System.String, System.Boolean)
  type: Method
  source:
    path: Swastika
    isExternal: true
  assemblies:
  - Swastika
  namespace: Swastika.Domain.Data.Repository
  syntax:
    content: protected LambdaExpression GetLambda(string propName, bool isGetDefault = true)
    parameters:
    - id: propName
      type: System.String
    - id: isGetDefault
      type: System.Boolean
    return:
      type: System.Linq.Expressions.LambdaExpression
    content.vb: Protected Function GetLambda(propName As String, isGetDefault As Boolean = True) As LambdaExpression
  overload: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda*
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda(String, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda(System.String, System.Boolean)
references:
- uid: Swastika.Domain.Data.Repository
  commentId: N:Swastika.Domain.Data.Repository
  isExternal: true
  name: Swastika.Domain.Data.Repository
  nameWithType: Swastika.Domain.Data.Repository
  fullName: Swastika.Domain.Data.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.#ctor*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.#ctor
  isExternal: true
  name: ViewRepositoryBase
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ViewRepositoryBase
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ViewRepositoryBase
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ViewRepositoryBase
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ViewRepositoryBase
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CheckIsExists
  isExternal: true
  name: CheckIsExists
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CheckIsExists
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CheckIsExists
- uid: '{TModel}'
  commentId: '!:TModel'
  definition: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: System.Func{{TModel},System.Boolean}
  commentId: '!:System.Func{`1,System.Boolean}'
  definition: System.Func`2
  name: Func<TModel, Boolean>
  nameWithType: Func<TModel, Boolean>
  fullName: System.Func<TModel, System.Boolean>
  nameWithType.vb: Func(Of TModel, Boolean)
  fullName.vb: System.Func(Of TModel, System.Boolean)
  name.vb: Func(Of TModel, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModel
  isExternal: true
  name: CreateModel
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModel
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModel
- uid: '{TView}'
  commentId: '!:TView'
  definition: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{`1}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<TView>
  nameWithType: RepositoryResponse<TView>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<TView>
  nameWithType.vb: RepositoryResponse(Of TView)
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of TView)
  name.vb: RepositoryResponse(Of TView)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  isExternal: true
  name: RepositoryResponse<TResult>
  nameWithType: RepositoryResponse<TResult>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<TResult>
  nameWithType.vb: RepositoryResponse(Of TResult)
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of TResult)
  name.vb: RepositoryResponse(Of TResult)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels
  commentId: N:Swastika.Domain.Core.ViewModels
  isExternal: true
  name: Swastika.Domain.Core.ViewModels
  nameWithType: Swastika.Domain.Core.ViewModels
  fullName: Swastika.Domain.Core.ViewModels
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CreateModelAsync
  isExternal: true
  name: CreateModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CreateModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CreateModelAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{{TView}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{`1}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<TView>>
  nameWithType: Task<RepositoryResponse<TView>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<TView>>
  nameWithType.vb: Task(Of RepositoryResponse(Of TView))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of TView))
  name.vb: Task(Of RepositoryResponse(Of TView))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModel*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModel
  isExternal: true
  name: EditModel
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModel
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModel
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModel
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.EditModelAsync
  isExternal: true
  name: EditModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.EditModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).EditModelAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModel
  isExternal: true
  name: GetSingleModel
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModel
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModel
- uid: System.Linq.Expressions.Expression{System.Func{{TModel},System.Boolean}}
  commentId: '!:System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}'
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModel, Boolean>>
  nameWithType: Expression<Func<TModel, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TModel, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Boolean))
  name.vb: Expression(Of Func(Of TModel, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: System.Linq.Expressions.Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: System.Linq.Expressions.Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetSingleModelAsync
  isExternal: true
  name: GetSingleModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetSingleModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetSingleModelAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.InitContext*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.InitContext
  isExternal: true
  name: InitContext
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.InitContext
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.InitContext
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).InitContext
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.LogErrorMessage
  isExternal: true
  name: LogErrorMessage
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.LogErrorMessage
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).LogErrorMessage
- uid: System.Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQuery
  isExternal: true
  name: ParsePagingQuery
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQuery
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQuery
- uid: System.Linq.IQueryable{{TModel}}
  commentId: '!:System.Linq.IQueryable{`1}'
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModel>
  nameWithType: IQueryable<TModel>
  fullName: System.Linq.IQueryable<TModel>
  nameWithType.vb: IQueryable(Of TModel)
  fullName.vb: System.Linq.IQueryable(Of TModel)
  name.vb: IQueryable(Of TModel)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Data.OData.Query.OrderByDirection
  isExternal: true
  name: OrderByDirection
  nameWithType: OrderByDirection
  fullName: Microsoft.Data.OData.Query.OrderByDirection
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}
  commentId: T:Swastika.Domain.Core.ViewModels.PaginationModel{`1}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.PaginationModel`1
  name: PaginationModel<TView>
  nameWithType: PaginationModel<TView>
  fullName: Swastika.Domain.Core.ViewModels.PaginationModel<TView>
  nameWithType.vb: PaginationModel(Of TView)
  fullName.vb: Swastika.Domain.Core.ViewModels.PaginationModel(Of TView)
  name.vb: PaginationModel(Of TView)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: System.Linq.IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: System.Linq.IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
  commentId: T:Swastika.Domain.Core.ViewModels.PaginationModel`1
  isExternal: true
  name: PaginationModel<T>
  nameWithType: PaginationModel<T>
  fullName: Swastika.Domain.Core.ViewModels.PaginationModel<T>
  nameWithType.vb: PaginationModel(Of T)
  fullName.vb: Swastika.Domain.Core.ViewModels.PaginationModel(Of T)
  name.vb: PaginationModel(Of T)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParsePagingQueryAsync
  isExternal: true
  name: ParsePagingQueryAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParsePagingQueryAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParsePagingQueryAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.PaginationModel{`1}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<PaginationModel<TView>>
  nameWithType: Task<PaginationModel<TView>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.PaginationModel<TView>>
  nameWithType.vb: Task(Of PaginationModel(Of TView))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.PaginationModel(Of TView))
  name.vb: Task(Of PaginationModel(Of TView))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.ParseView
  isExternal: true
  name: ParseView
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.ParseView
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).ParseView
- uid: System.Collections.Generic.List{{TModel}}
  commentId: '!:System.Collections.Generic.List{`0}'
  definition: System.Collections.Generic.List`1
  name: List<TModel>
  nameWithType: List<TModel>
  fullName: System.Collections.Generic.List<TModel>
  nameWithType.vb: List(Of TModel)
  fullName.vb: System.Collections.Generic.List(Of TModel)
  name.vb: List(Of TModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TView}}
  commentId: '!:System.Collections.Generic.List{`1}'
  definition: System.Collections.Generic.List`1
  name: List<TView>
  nameWithType: List<TView>
  fullName: System.Collections.Generic.List<TView>
  nameWithType.vb: List(Of TView)
  fullName.vb: System.Collections.Generic.List(Of TView)
  name.vb: List(Of TView)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RegisterAutoMapper
  isExternal: true
  name: RegisterAutoMapper
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RegisterAutoMapper
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RegisterAutoMapper
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelList
  isExternal: true
  name: GetModelList
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelList
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelList
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{`2}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<List<TView>>
  nameWithType: RepositoryResponse<List<TView>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<TView>>
  nameWithType.vb: RepositoryResponse(Of List(Of TView))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of TView))
  name.vb: RepositoryResponse(Of List(Of TView))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{`2}}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<PaginationModel<TView>>
  nameWithType: RepositoryResponse<PaginationModel<TView>>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<Swastika.Domain.Core.ViewModels.PaginationModel<TView>>
  nameWithType.vb: RepositoryResponse(Of PaginationModel(Of TView))
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of Swastika.Domain.Core.ViewModels.PaginationModel(Of TView))
  name.vb: RepositoryResponse(Of PaginationModel(Of TView))
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListAsync
  isExternal: true
  name: GetModelListAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{{TView}}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Collections.Generic.List{`2}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<List<TView>>>
  nameWithType: Task<RepositoryResponse<List<TView>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Collections.Generic.List<TView>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of List(Of TView)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Collections.Generic.List(Of TView)))
  name.vb: Task(Of RepositoryResponse(Of List(Of TView)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{{TView}}}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{Swastika.Domain.Core.ViewModels.PaginationModel{`2}}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<PaginationModel<TView>>>
  nameWithType: Task<RepositoryResponse<PaginationModel<TView>>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<Swastika.Domain.Core.ViewModels.PaginationModel<TView>>>
  nameWithType.vb: Task(Of RepositoryResponse(Of PaginationModel(Of TView)))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of Swastika.Domain.Core.ViewModels.PaginationModel(Of TView)))
  name.vb: Task(Of RepositoryResponse(Of PaginationModel(Of TView)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Swastika.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListBy
  isExternal: true
  name: GetModelListBy
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListBy
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListBy
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetModelListByAsync
  isExternal: true
  name: GetModelListByAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetModelListByAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetModelListByAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModel
  isExternal: true
  name: RemoveListModel
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModel
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModel
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<Boolean>
  nameWithType: RepositoryResponse<Boolean>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>
  nameWithType.vb: RepositoryResponse(Of Boolean)
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean)
  name.vb: RepositoryResponse(Of Boolean)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveListModelAsync
  isExternal: true
  name: RemoveListModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveListModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveListModelAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<Boolean>>
  nameWithType: Task<RepositoryResponse<Boolean>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>>
  nameWithType.vb: Task(Of RepositoryResponse(Of Boolean))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean))
  name.vb: Task(Of RepositoryResponse(Of Boolean))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModel
  isExternal: true
  name: RemoveModel
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModel
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModel
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.RemoveModelAsync
  isExternal: true
  name: RemoveModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.RemoveModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).RemoveModelAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModel
  isExternal: true
  name: SaveModel
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModel
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModel
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveModelAsync
  isExternal: true
  name: SaveModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveModelAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.SaveSubModelAsync
  isExternal: true
  name: SaveSubModelAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.SaveSubModelAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).SaveSubModelAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Max*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Max
  isExternal: true
  name: Max
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Max
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Max
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Max
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Max
- uid: System.Linq.Expressions.Expression{System.Func{{TModel},System.Int32}}
  commentId: '!:System.Linq.Expressions.Expression{System.Func{`0,System.Int32}}'
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModel, Int32>>
  nameWithType: Expression<Func<TModel, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModel, System.Int32>>
  nameWithType.vb: Expression(Of Func(Of TModel, Int32))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Int32))
  name.vb: Expression(Of Func(Of TModel, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}
  commentId: T:Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}
  parent: Swastika.Domain.Core.ViewModels
  definition: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<Int32>
  nameWithType: RepositoryResponse<Int32>
  fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Int32>
  nameWithType.vb: RepositoryResponse(Of Int32)
  fullName.vb: Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Int32)
  name.vb: RepositoryResponse(Of Int32)
  spec.csharp:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.MaxAsync
  isExternal: true
  name: MaxAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.MaxAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).MaxAsync
- uid: System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}}
  commentId: '!:System.Threading.Tasks.Task{Swastika.Domain.Core.ViewModels.RepositoryResponse{System.Int32}}'
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<Int32>>
  nameWithType: Task<RepositoryResponse<Int32>>
  fullName: System.Threading.Tasks.Task<Swastika.Domain.Core.ViewModels.RepositoryResponse<System.Int32>>
  nameWithType.vb: Task(Of RepositoryResponse(Of Int32))
  fullName.vb: System.Threading.Tasks.Task(Of Swastika.Domain.Core.ViewModels.RepositoryResponse(Of System.Int32))
  name.vb: Task(Of RepositoryResponse(Of Int32))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Swastika.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.Count
  isExternal: true
  name: Count
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.Count
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.Count
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).Count
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).Count
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.CountAsync
  isExternal: true
  name: CountAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.CountAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).CountAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFields
  isExternal: true
  name: UpdateFields
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFields
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFields
- uid: System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField}
  commentId: '!:System.Collections.Generic.List{Swastika.Domain.Core.ViewModels.EntityField}'
  definition: System.Collections.Generic.List`1
  name: List<EntityField>
  nameWithType: List<EntityField>
  fullName: System.Collections.Generic.List<Swastika.Domain.Core.ViewModels.EntityField>
  nameWithType.vb: List(Of EntityField)
  fullName.vb: System.Collections.Generic.List(Of Swastika.Domain.Core.ViewModels.EntityField)
  name.vb: List(Of EntityField)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Swastika.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Swastika.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Swastika.Domain.Core.ViewModels.EntityField
    name: EntityField
    nameWithType: EntityField
    fullName: Swastika.Domain.Core.ViewModels.EntityField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.UpdateFieldsAsync
  isExternal: true
  name: UpdateFieldsAsync
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.UpdateFieldsAsync
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
- uid: Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda*
  commentId: Overload:Swastika.Domain.Data.Repository.ViewRepositoryBase`3.GetLambda
  isExternal: true
  name: GetLambda
  nameWithType: ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda
  fullName: Swastika.Domain.Data.Repository.ViewRepositoryBase<TDbContext, TModel, TView>.GetLambda
  nameWithType.vb: ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda
  fullName.vb: Swastika.Domain.Data.Repository.ViewRepositoryBase(Of TDbContext, TModel, TView).GetLambda
- uid: System.Linq.Expressions.LambdaExpression
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
